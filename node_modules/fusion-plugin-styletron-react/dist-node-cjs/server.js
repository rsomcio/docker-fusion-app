"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _react = _interopRequireDefault(require("react"));

var _fusionCore = require("fusion-core");

var _styletronReact = require("styletron-react");

var _styletronEngineAtomic = require("styletron-engine-atomic");

var _injectDeclarationCompatMixin = require("./inject-declaration-compat-mixin.js");

var _constants = require("./constants.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env node */
let workerPath;
let wasmPath;

if (process.env.NODE_ENV !== "production" && true) {
  const base = _path.default.dirname(require.resolve('css-to-js-sourcemap-worker'));

  workerPath = _path.default.resolve(base, 'worker.js');
  wasmPath = _path.default.resolve(base, 'mappings.wasm');
}

const StyletronCompat = (0, _injectDeclarationCompatMixin.injectDeclarationCompatMixin)(_styletronEngineAtomic.Server);
const plugin = true && (0, _fusionCore.createPlugin)({
  deps: {
    prefix: _constants.AtomicPrefixToken.optional
  },
  middleware: ({
    prefix
  }) => (ctx, next) => {
    if (process.env.NODE_ENV !== "production") {
      if (ctx.url === _constants.workerRoute) {
        ctx.body = _fs.default.createReadStream(workerPath);
        return next();
      }

      if (ctx.url === _constants.wasmRoute) {
        ctx.body = _fs.default.createReadStream(wasmPath);
        return next();
      }
    }

    if (ctx.element) {
      const config = prefix === void 0 ? void 0 : {
        prefix
      };
      const engine = new StyletronCompat(config);
      ctx.element = _react.default.createElement(_styletronReact.Provider, {
        value: engine
      }, ctx.element);
      return next().then(() => {
        const stylesForHead = engine.getStylesheetsHtml();
        ctx.template.head.push((0, _fusionCore.dangerouslySetHTML)(stylesForHead));
      });
    } else {
      return next();
    }
  }
});
var _default = plugin;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJuYW1lcyI6WyJ3b3JrZXJQYXRoIiwid2FzbVBhdGgiLCJiYXNlIiwicGF0aCIsImRpcm5hbWUiLCJyZXF1aXJlIiwicmVzb2x2ZSIsIlN0eWxldHJvbkNvbXBhdCIsIlN0eWxldHJvbiIsInBsdWdpbiIsImRlcHMiLCJwcmVmaXgiLCJBdG9taWNQcmVmaXhUb2tlbiIsIm9wdGlvbmFsIiwibWlkZGxld2FyZSIsImN0eCIsIm5leHQiLCJ1cmwiLCJ3b3JrZXJSb3V0ZSIsImJvZHkiLCJmcyIsImNyZWF0ZVJlYWRTdHJlYW0iLCJ3YXNtUm91dGUiLCJlbGVtZW50IiwiY29uZmlnIiwiZW5naW5lIiwidGhlbiIsInN0eWxlc0ZvckhlYWQiLCJnZXRTdHlsZXNoZWV0c0h0bWwiLCJ0ZW1wbGF0ZSIsImhlYWQiLCJwdXNoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBVUE7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBR0E7O0FBQ0E7O0FBRUE7O0FBQ0E7Ozs7QUFyQkE7Ozs7Ozs7O0FBUUE7QUFlQSxJQUFJQSxVQUFKO0FBQ0EsSUFBSUMsUUFBSjs7QUFFQSxJQUFJLDZDQUFKLEVBQXlCO0FBQ3ZCLFFBQU1DLElBQUksR0FBR0MsY0FBS0MsT0FBTCxDQUFhQyxPQUFPLENBQUNDLE9BQVIsQ0FBZ0IsNEJBQWhCLENBQWIsQ0FBYjs7QUFDQU4sRUFBQUEsVUFBVSxHQUFHRyxjQUFLRyxPQUFMLENBQWFKLElBQWIsRUFBbUIsV0FBbkIsQ0FBYjtBQUNBRCxFQUFBQSxRQUFRLEdBQUdFLGNBQUtHLE9BQUwsQ0FBYUosSUFBYixFQUFtQixlQUFuQixDQUFYO0FBQ0Q7O0FBRUQsTUFBTUssZUFBZSxHQUFHLGdFQUE2QkMsNkJBQTdCLENBQXhCO0FBRUEsTUFBTUMsTUFBTSxHQUNWLFFBQ0EsOEJBQWE7QUFDWEMsRUFBQUEsSUFBSSxFQUFFO0FBQ0pDLElBQUFBLE1BQU0sRUFBRUMsNkJBQWtCQztBQUR0QixHQURLO0FBSVhDLEVBQUFBLFVBQVUsRUFBRSxDQUFDO0FBQUNILElBQUFBO0FBQUQsR0FBRCxLQUFjLENBQUNJLEdBQUQsRUFBTUMsSUFBTixLQUFlO0FBQ3ZDLCtDQUFhO0FBQ1gsVUFBSUQsR0FBRyxDQUFDRSxHQUFKLEtBQVlDLHNCQUFoQixFQUE2QjtBQUMzQkgsUUFBQUEsR0FBRyxDQUFDSSxJQUFKLEdBQVdDLFlBQUdDLGdCQUFILENBQW9CckIsVUFBcEIsQ0FBWDtBQUNBLGVBQU9nQixJQUFJLEVBQVg7QUFDRDs7QUFDRCxVQUFJRCxHQUFHLENBQUNFLEdBQUosS0FBWUssb0JBQWhCLEVBQTJCO0FBQ3pCUCxRQUFBQSxHQUFHLENBQUNJLElBQUosR0FBV0MsWUFBR0MsZ0JBQUgsQ0FBb0JwQixRQUFwQixDQUFYO0FBQ0EsZUFBT2UsSUFBSSxFQUFYO0FBQ0Q7QUFDRjs7QUFFRCxRQUFJRCxHQUFHLENBQUNRLE9BQVIsRUFBaUI7QUFDZixZQUFNQyxNQUFNLEdBQUdiLE1BQU0sS0FBSyxLQUFLLENBQWhCLEdBQW9CLEtBQUssQ0FBekIsR0FBNkI7QUFBQ0EsUUFBQUE7QUFBRCxPQUE1QztBQUNBLFlBQU1jLE1BQU0sR0FBRyxJQUFJbEIsZUFBSixDQUFvQmlCLE1BQXBCLENBQWY7QUFFQVQsTUFBQUEsR0FBRyxDQUFDUSxPQUFKLEdBQ0UsNkJBQUMsd0JBQUQ7QUFBbUIsUUFBQSxLQUFLLEVBQUVFO0FBQTFCLFNBQW1DVixHQUFHLENBQUNRLE9BQXZDLENBREY7QUFJQSxhQUFPUCxJQUFJLEdBQUdVLElBQVAsQ0FBWSxNQUFNO0FBQ3ZCLGNBQU1DLGFBQWEsR0FBR0YsTUFBTSxDQUFDRyxrQkFBUCxFQUF0QjtBQUNBYixRQUFBQSxHQUFHLENBQUNjLFFBQUosQ0FBYUMsSUFBYixDQUFrQkMsSUFBbEIsQ0FBdUIsb0NBQW1CSixhQUFuQixDQUF2QjtBQUNELE9BSE0sQ0FBUDtBQUlELEtBWkQsTUFZTztBQUNMLGFBQU9YLElBQUksRUFBWDtBQUNEO0FBQ0Y7QUEvQlUsQ0FBYixDQUZGO2VBb0NpQlAsTSIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBDb3B5cmlnaHQgKGMpIDIwMTggVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbi8qIGVzbGludC1lbnYgbm9kZSAqL1xuXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBmcyBmcm9tICdmcyc7XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge2NyZWF0ZVBsdWdpbiwgZGFuZ2Vyb3VzbHlTZXRIVE1MfSBmcm9tICdmdXNpb24tY29yZSc7XG5pbXBvcnQgdHlwZSB7RnVzaW9uUGx1Z2lufSBmcm9tICdmdXNpb24tY29yZSc7XG5cbmltcG9ydCB7UHJvdmlkZXIgYXMgU3R5bGV0cm9uUHJvdmlkZXJ9IGZyb20gJ3N0eWxldHJvbi1yZWFjdCc7XG5pbXBvcnQge1NlcnZlciBhcyBTdHlsZXRyb259IGZyb20gJ3N0eWxldHJvbi1lbmdpbmUtYXRvbWljJztcblxuaW1wb3J0IHtpbmplY3REZWNsYXJhdGlvbkNvbXBhdE1peGlufSBmcm9tICcuL2luamVjdC1kZWNsYXJhdGlvbi1jb21wYXQtbWl4aW4uanMnO1xuaW1wb3J0IHt3b3JrZXJSb3V0ZSwgd2FzbVJvdXRlLCBBdG9taWNQcmVmaXhUb2tlbn0gZnJvbSAnLi9jb25zdGFudHMuanMnO1xuXG5sZXQgd29ya2VyUGF0aDtcbmxldCB3YXNtUGF0aDtcblxuaWYgKF9fREVWX18gJiYgX19OT0RFX18pIHtcbiAgY29uc3QgYmFzZSA9IHBhdGguZGlybmFtZShyZXF1aXJlLnJlc29sdmUoJ2Nzcy10by1qcy1zb3VyY2VtYXAtd29ya2VyJykpO1xuICB3b3JrZXJQYXRoID0gcGF0aC5yZXNvbHZlKGJhc2UsICd3b3JrZXIuanMnKTtcbiAgd2FzbVBhdGggPSBwYXRoLnJlc29sdmUoYmFzZSwgJ21hcHBpbmdzLndhc20nKTtcbn1cblxuY29uc3QgU3R5bGV0cm9uQ29tcGF0ID0gaW5qZWN0RGVjbGFyYXRpb25Db21wYXRNaXhpbihTdHlsZXRyb24pO1xuXG5jb25zdCBwbHVnaW4gPVxuICBfX05PREVfXyAmJlxuICBjcmVhdGVQbHVnaW4oe1xuICAgIGRlcHM6IHtcbiAgICAgIHByZWZpeDogQXRvbWljUHJlZml4VG9rZW4ub3B0aW9uYWwsXG4gICAgfSxcbiAgICBtaWRkbGV3YXJlOiAoe3ByZWZpeH0pID0+IChjdHgsIG5leHQpID0+IHtcbiAgICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgIGlmIChjdHgudXJsID09PSB3b3JrZXJSb3V0ZSkge1xuICAgICAgICAgIGN0eC5ib2R5ID0gZnMuY3JlYXRlUmVhZFN0cmVhbSh3b3JrZXJQYXRoKTtcbiAgICAgICAgICByZXR1cm4gbmV4dCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdHgudXJsID09PSB3YXNtUm91dGUpIHtcbiAgICAgICAgICBjdHguYm9keSA9IGZzLmNyZWF0ZVJlYWRTdHJlYW0od2FzbVBhdGgpO1xuICAgICAgICAgIHJldHVybiBuZXh0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGN0eC5lbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHByZWZpeCA9PT0gdm9pZCAwID8gdm9pZCAwIDoge3ByZWZpeH07XG4gICAgICAgIGNvbnN0IGVuZ2luZSA9IG5ldyBTdHlsZXRyb25Db21wYXQoY29uZmlnKTtcblxuICAgICAgICBjdHguZWxlbWVudCA9IChcbiAgICAgICAgICA8U3R5bGV0cm9uUHJvdmlkZXIgdmFsdWU9e2VuZ2luZX0+e2N0eC5lbGVtZW50fTwvU3R5bGV0cm9uUHJvdmlkZXI+XG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIG5leHQoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICBjb25zdCBzdHlsZXNGb3JIZWFkID0gZW5naW5lLmdldFN0eWxlc2hlZXRzSHRtbCgpO1xuICAgICAgICAgIGN0eC50ZW1wbGF0ZS5oZWFkLnB1c2goZGFuZ2Vyb3VzbHlTZXRIVE1MKHN0eWxlc0ZvckhlYWQpKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV4dCgpO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xuXG5leHBvcnQgZGVmYXVsdCAoKHBsdWdpbjogYW55KTogRnVzaW9uUGx1Z2luPCosICo+KTtcbiJdfQ==