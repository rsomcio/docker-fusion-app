'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var ssrPrepass = _interopDefault(require('@rtsao/react-ssr-prepass'));
var PropTypes = _interopDefault(require('prop-types'));
var ReactDOM = _interopDefault(require('react-dom'));
var FusionApp = require('fusion-core');
var FusionApp__default = _interopDefault(FusionApp);

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
var PrepareState =
/*#__PURE__*/
function () {
  function PrepareState() {
    this.seen = new Map();
    this.pending = new Map();
  }

  var _proto = PrepareState.prototype;

  _proto.isResolved = function isResolved(Component, effectId, effectPromiseThunk) {
    var seenEffectIds = this.seen.get(Component);
    var pendingPromises = this.pending.get(Component); // Initialize if not present

    if (!seenEffectIds) {
      seenEffectIds = new Set();
      this.seen.set(Component, seenEffectIds);
    } // If seen and not pending, then it has been resolved


    if (seenEffectIds.has(effectId) && (!pendingPromises || !pendingPromises.has(effectId))) {
      return true;
    } // If not yet seen, need to start promise


    if (!seenEffectIds.has(effectId)) {
      if (!pendingPromises) {
        pendingPromises = new Map();
        this.pending.set(Component, pendingPromises);
      }

      var effectPromise = effectPromiseThunk();
      seenEffectIds.add(effectId);
      pendingPromises.set(effectId, effectPromise);
    }

    return false;
  };

  _proto.consumeAndAwaitPromises = function consumeAndAwaitPromises() {
    var promises = [];

    for (var _iterator = this.pending.values(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var _map = _ref;

      for (var _iterator2 = _map.values(), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var _promise = _ref2;
        promises.push(_promise);
      }
    }

    this.pending = new Map(); // clear

    return Promise.all(promises);
  };

  return PrepareState;
}();

function prepare(element) {
  var prepareState = new PrepareState();

  var PrepareContextProvider =
  /*#__PURE__*/
  function (_React$Component) {
    _inheritsLoose(PrepareContextProvider, _React$Component);

    function PrepareContextProvider() {
      return _React$Component.apply(this, arguments) || this;
    }

    var _proto2 = PrepareContextProvider.prototype;

    _proto2.getChildContext = function getChildContext() {
      return {
        __IS_PREPARE__: true,
        __PREPARE_STATE__: prepareState
      };
    };

    _proto2.render = function render() {
      return element;
    };

    return PrepareContextProvider;
  }(React.Component);

  PrepareContextProvider.childContextTypes = {
    __PREPARE_STATE__: function __PREPARE_STATE__() {},
    __IS_PREPARE__: function __IS_PREPARE__() {}
  };

  function process() {
    return new Promise(function ($return, $error) {
      return Promise.resolve(ssrPrepass(React.createElement(PrepareContextProvider))).then(function ($await_1) {
        try {
          if (prepareState.pending.size) {
            return $return(prepareState.consumeAndAwaitPromises().then(process));
          }

          return $return();
        } catch ($boundEx) {
          return $error($boundEx);
        }
      }, $error);
    });
  }

  return Promise.resolve().then(process);
}

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _inheritsLoose$1(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
var prepared = function prepared(sideEffect, opts) {
  if (opts === void 0) {
    opts = {};
  }

  return function (OriginalComponent) {
    opts = Object.assign({
      boundary: false,
      defer: false,
      componentDidMount: true,
      componentWillReceiveProps: false,
      componentDidUpdate: false,
      contextTypes: {},
      forceUpdate: false
    }, opts);

    var PreparedComponent =
    /*#__PURE__*/
    function (_React$Component) {
      _inheritsLoose$1(PreparedComponent, _React$Component);

      function PreparedComponent() {
        return _React$Component.apply(this, arguments) || this;
      }

      var _proto = PreparedComponent.prototype;

      _proto.componentDidMount = function componentDidMount() {
        var _this = this;

        if (opts.componentDidMount) {
          Promise.resolve(sideEffect(this.props, this.context)).then(function () {
            if (opts.forceUpdate) {
              _this.forceUpdate();
            }
          });
        }
      };

      _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps, nextContext) {
        if (opts.componentWillReceiveProps) {
          sideEffect(nextProps, nextContext);
        }
      };

      _proto.componentDidUpdate = function componentDidUpdate() {
        if (opts.componentDidUpdate) {
          sideEffect(this.props, this.context);
        }
      };

      _proto.render = function render() {
        var _this2 = this;

        var effectId = this.props.effectId || 'defaultId';
        var prepareState = this.context.__PREPARE_STATE__;

        if (prepareState) {
          if (opts.defer || opts.boundary) {
            // skip prepare if defer or boundary
            return null;
          }

          var isResolved = prepareState.isResolved(PreparedComponent, effectId, function () {
            return sideEffect(_this2.props, _this2.context);
          });

          if (!isResolved) {
            // Wait until resolved
            return null;
          }
        }

        return React.createElement(OriginalComponent, this.props);
      };

      return PreparedComponent;
    }(React.Component);

    PreparedComponent.contextTypes = _objectSpread({
      __PREPARE_STATE__: function __PREPARE_STATE__() {}
    }, opts.contextTypes);
    var displayName = OriginalComponent.displayName || OriginalComponent.name || '';
    PreparedComponent.displayName = "PreparedComponent(" + displayName + ")";
    return PreparedComponent;
  };
};

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
var contextTypes = {
  splitComponentLoaders: PropTypes.array.isRequired
};

function withAsyncComponent(_ref) {
  var defer = _ref.defer,
      load = _ref.load,
      LoadingComponent = _ref.LoadingComponent,
      ErrorComponent = _ref.ErrorComponent;
  var AsyncComponent = null;
  var error = null;
  var metadata = {
    chunkIds: [],
    i18nKeys: []
  };

  function WithAsyncComponent(props) {
    {
      var promise = load(); // $FlowFixMe

      var id = promise.__MODULE_ID;

      if (typeof __webpack_modules__ !== 'undefined' && __webpack_modules__[id]) {
        // If module is already loaded, it can be synchronously imported
        AsyncComponent = __webpack_require__(id).default;
      }
    }

    if (error) {
      return React.createElement(ErrorComponent, {
        error: error
      });
    }

    if (!AsyncComponent) {
      return React.createElement(LoadingComponent, null);
    }

    return React.createElement(AsyncComponent, props);
  }

  return prepared(function (props, context) {
    if (AsyncComponent) {
      return Promise.resolve(AsyncComponent);
    }

    var componentPromise;

    try {
      componentPromise = load();
    } catch (e) {
      componentPromise = Promise.reject(e);
    } // $FlowFixMe


    metadata.chunkIds = componentPromise.__CHUNK_IDS || []; // $FlowFixMe

    metadata.i18nKeys = componentPromise.__I18N_KEYS || [];

    var loadPromises = [componentPromise].concat(context.splitComponentLoaders.map(function (loader) {
      return loader(metadata.chunkIds, metadata);
    }));
    return Promise.all(loadPromises).then(function (_ref2) {
      var asyncComponent = _ref2[0];
      // Note: .default is toolchain specific, breaks w/ CommonJS exports
      AsyncComponent = asyncComponent.default;

      if (AsyncComponent === undefined) {
        throw new Error('Bundle does not contain a default export');
      }
    }).catch(function (err) {
      error = err;
      setTimeout(function () {
        throw err;
      }); // log error
    });
  }, {
    defer: defer,
    contextTypes: contextTypes,
    forceUpdate: true
  })(WithAsyncComponent);
}

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
// to visit the minimum number of nodes

var traverseExclude = prepared(function () {
  return Promise.resolve();
}, {
  componentDidMount: false,
  componentWillReceiveProps: false,
  componentDidUpdate: false,
  defer: true
});

function _inheritsLoose$2(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
var PrepareProvider =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose$2(PrepareProvider, _React$Component);

  function PrepareProvider(props, context) {
    var _this;

    _this = _React$Component.call(this, props, context) || this;
    _this.splitComponentLoaders = [];
    _this.markAsCritical = props.markAsCritical;
    return _this;
  }

  var _proto = PrepareProvider.prototype;

  _proto.getChildContext = function getChildContext() {
    return {
      splitComponentLoaders: this.splitComponentLoaders,
      markAsCritical: this.markAsCritical
    };
  };

  _proto.render = function render() {
    return React.Children.only(this.props.children);
  };

  return PrepareProvider;
}(React.Component);

PrepareProvider.childContextTypes = {
  splitComponentLoaders: PropTypes.array.isRequired,
  markAsCritical: PropTypes.func
};

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
var middleware = function middleware(ctx, next) {
  if (process.env.NODE_ENV !== "production") {
    // eslint-disable-next-line no-console
    console.warn('The {middleware} export from fusion-react is deprecated.');
  }

  var markAsCritical = noop;
  ctx.element = React.createElement(PrepareProvider, {
    markAsCritical: markAsCritical
  }, ctx.element);
  return next();
};

function noop() {}

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env node */

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env browser */
var clientRender = (function (el) {
  var domElement = document.getElementById('root');

  if (!domElement) {
    throw new Error("Could not find 'root' element");
  }

  return ReactDOM.hydrate ? ReactDOM.hydrate(el, domElement) : ReactDOM.render(el, domElement);
});

function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { _defineProperty$1(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty$1(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _inheritsLoose$3(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
var Provider = {
  create: function create(name) {
    var _objectSpread2;

    var Provider =
    /*#__PURE__*/
    function (_React$Component) {
      _inheritsLoose$3(Provider, _React$Component);

      function Provider() {
        return _React$Component.apply(this, arguments) || this;
      }

      var _proto = Provider.prototype;

      _proto.getChildContext = function getChildContext() {
        var _ref;

        return _ref = {}, _ref[name] = this.props.provides, _ref;
      };

      _proto.render = function render() {
        return React.Children.only(this.props.children);
      };

      return Provider;
    }(React.Component);

    Provider.childContextTypes = _objectSpread$1({}, Provider.childContextTypes || {}, (_objectSpread2 = {}, _objectSpread2[name] = PropTypes.any.isRequired, _objectSpread2));
    Provider.displayName = name.replace(/^./, function (c) {
      return c.toUpperCase();
    }) + 'Provider';
    return Provider;
  }
};

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
var plugin = {
  create: function create(name, plugin, provider) {
    if (plugin.__plugin__ === undefined) {
      plugin = FusionApp.createPlugin(plugin);
    }

    if (!plugin.__plugin__) {
      throw new Error('Provided plugin does not match FusionPlugin<TDeps, TService>');
    }

    var originalMiddleware = plugin.middleware;
    var ProviderComponent = provider || Provider.create(name);

    plugin.middleware = function (deps, provides) {
      var nextMiddleware = originalMiddleware && originalMiddleware(deps, provides);

      var mw = function mw(ctx, next) {
        if (ctx.element) {
          ctx.element = React.createElement(ProviderComponent, {
            provides: provides,
            ctx: ctx
          }, ctx.element);
        }

        if (nextMiddleware) {
          return nextMiddleware(ctx, next);
        }

        return next();
      };

      return mw;
    };

    return plugin;
  }
};

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/** Copyright (c) 2019 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
var FusionContext = React.createContext({});
var ServiceContext = React.createContext(function () {
  throw new Error('`ServiceContext.Provider` was not found. This occurs if you are attempting to use `ServiceContext` in a non-React Fusion.js application.');
});
function useService(token) {
  var getService = React.useContext(ServiceContext);
  var provides = getService(token);
  return provides;
}
function ServiceConsumer(_ref) {
  var token = _ref.token,
      children = _ref.children;
  return React.createElement(ServiceContext.Consumer, null, function (getService) {
    var provides = getService(token);
    return children(provides);
  });
}

function getServices(getService, deps) {
  var services = {};
  Object.keys(deps).forEach(function (name) {
    services[name] = getService(deps[name]);
  });
  return services;
}

var identity = function identity(i) {
  return i;
};

function withServices(deps, mapServicesToProps) {
  if (mapServicesToProps === void 0) {
    mapServicesToProps = identity;
  }

  function resolve(getService) {
    var services = getServices(getService, deps);
    var serviceProps = mapServicesToProps(services);
    return serviceProps;
  }

  return function (Component) {
    return function WithServices(props) {
      return React.createElement(ServiceContext.Consumer, null, function (getService) {
        return React.createElement(Component, _extends({}, resolve(getService), props));
      });
    };
  };
}

function _inheritsLoose$4(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2(Object(source), true).forEach(function (key) { _defineProperty$2(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty$2(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
function capitalize(str) {
  return str.replace(/^./, function (c) {
    return c.toUpperCase();
  });
}

var hoc = {
  create: function create(name, mapProvidesToProps, token) {
    var mapProvides = mapProvidesToProps ? mapProvidesToProps : function (provides) {
      var _ref;

      return _ref = {}, _ref[name] = provides, _ref;
    };
    var _token = token; // Make token constant for flow

    if (_token) {
      // Use new Context through useService hook
      return function (Component) {
        var Wrapper = function Wrapper(props) {
          var service = useService(_token);
          return React.createElement(Component, _objectSpread$2({}, props, {}, mapProvides(service)));
        };

        var displayName = Component.displayName || Component.name || 'Anonymous';
        Wrapper.displayName = "With" + capitalize(name) + "(" + displayName + ")";
        return Wrapper;
      };
    } else {
      // Use legacy Context
      return function (Component) {
        var _HOC$contextTypes;

        var HOC =
        /*#__PURE__*/
        function (_React$Component) {
          _inheritsLoose$4(HOC, _React$Component);

          function HOC(props, ctx) {
            var _this;

            _this = _React$Component.call(this, props, ctx) || this;
            _this.provides = ctx[name];
            return _this;
          }

          var _proto = HOC.prototype;

          _proto.render = function render() {
            var props = _objectSpread$2({}, this.props, {}, mapProvides(this.provides));

            return React.createElement(Component, props);
          };

          return HOC;
        }(React.Component);

        var displayName = Component.displayName || Component.name || 'Anonymous';
        HOC.displayName = "With" + capitalize(name) + "(" + displayName + ")";
        HOC.contextTypes = (_HOC$contextTypes = {}, _HOC$contextTypes[name] = PropTypes.any.isRequired, _HOC$contextTypes);
        return HOC;
      };
    }
  }
};

function _inheritsLoose$5(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env browser */
var SkipPrepareToken = FusionApp.createToken('SkipPrepareToken');

var App =
/*#__PURE__*/
function (_FusionApp) {
  _inheritsLoose$5(App, _FusionApp);

  function App(root, render) {
    var _this;

    if (!React.isValidElement(root)) {
      throw new Error('Invalid React element. Ensure your root element is a React.Element (e.g. <Foo />) and not a React.Component (e.g. Foo)');
    }

    var getService = function getService(token) {
      // $FlowFixMe
      var provides = _this.getService(token);

      var isRequiredToken = Boolean(token.optional);

      if (typeof provides === 'undefined' && isRequiredToken) {
        throw new Error("Token " + token.name + " not registered or registered plugin does not provide a service. To use an optional plugin, use `Token.optional`.");
      }

      return provides;
    };

    var renderer = FusionApp.createPlugin({
      deps: {
        criticalChunkIds: FusionApp.CriticalChunkIdsToken.optional,
        skipPrepare: SkipPrepareToken.optional
      },
      provides: function provides(_ref) {
        var skipPrepare = _ref.skipPrepare;
        return function (el, ctx) {
          return (skipPrepare ? Promise.resolve() : prepare(el)).then(function () {
            if (render) {
              return render(el, ctx);
            }

            {
              return clientRender(el);
            }
          });
        };
      },
      middleware: function middleware$$1(_ref2) {
        var criticalChunkIds = _ref2.criticalChunkIds;
        return function (ctx, next) {
          var markAsCritical = noop$1;
          ctx.element = React.createElement(PrepareProvider, {
            markAsCritical: markAsCritical
          }, React.createElement(FusionContext.Provider, {
            value: ctx
          }, React.createElement(ServiceContext.Provider, {
            value: getService
          }, ctx.element)));
          return next();
        };
      }
    });
    return _this = _FusionApp.call(this, root, renderer) || this;
  }

  return App;
}(FusionApp__default);

function noop$1() {}

exports.SkipPrepareToken = SkipPrepareToken;
exports.default = App;
exports.FusionContext = FusionContext;
exports.ProviderPlugin = plugin;
exports.ProvidedHOC = hoc;
exports.Provider = Provider;
exports.ServiceConsumer = ServiceConsumer;
exports.ServiceContext = ServiceContext;
exports.useService = useService;
exports.withServices = withServices;
exports.prepare = prepare;
exports.prepared = prepared;
exports.split = withAsyncComponent;
exports.exclude = traverseExclude;
exports.middleware = middleware;
