import { createPlugin, createToken } from 'fusion-core';
import { FetchToken } from 'fusion-tokens';

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
const globalEventType = '*';
class UniversalEmitter {
  constructor() {
    this.handlers = {};
    this.mappers = {};
  }

  map(...args) {
    const {
      type,
      callback
    } = getArgs(args);
    if (!this.mappers[type]) this.mappers[type] = [];
    this.mappers[type].push(callback);
  }

  on(...args) {
    const {
      type,
      callback
    } = getArgs(args);
    if (!this.handlers[type]) this.handlers[type] = [];
    this.handlers[type].push(callback);
  }

  off(...args) {
    const {
      type,
      callback
    } = getArgs(args);
    const index = this.handlers[type].indexOf(callback);
    if (index > -1) this.handlers[type].splice(index, 1);
  }

  mapEvent(type, payload, ctx) {
    const globalMappers = this.mappers[globalEventType] || [];
    const mappers = (this.mappers[type] || []).concat(globalMappers);
    return mappers.reduce((payload, mapper) => {
      return mapper(payload, ctx, type);
    }, payload);
  }

  handleEvent(type, payload, ctx) {
    const globalHandlers = this.handlers[globalEventType] || [];
    const handlers = (this.handlers[type] || []).concat(globalHandlers);
    handlers.forEach(handler => handler(payload, ctx, type));
  }
  /* eslint-disable-next-line  no-unused-vars */


  from(ctx) {
    throw new Error('Not implemented.');
  }
  /* eslint-disable-next-line  no-unused-vars */


  emit(type, payload, ctx) {} // throw new Error('Not implemented.');

  /* eslint-disable-next-line  no-unused-vars */


  setFrequency(frequency) {
    throw new Error('Not implemented.');
  }

  teardown() {
    throw new Error('Not implemented.');
  }

  flush() {
    throw new Error('Not implemented.');
  }

}

function validateHandler(handler) {
  if (typeof handler !== 'function') throw new TypeError('handler must be a function');
}

function getArgs(args) {
  const type = typeof args[0] === 'string' ? args[0] : globalEventType;
  const callback = args[1] || args[0];
  validateHandler(callback);
  return {
    type,
    callback
  };
}

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env node */

function split(arr, index) {
  if (arr.length < index) {
    return [arr, []];
  }

  const a = arr.slice(0, index);
  const b = arr.slice(index);
  return [a, b];
}

class InMemoryBatchStorage {
  constructor() {
    this.data = [];

    this.add = (...toBeAdded) => {
      this.data.push(...toBeAdded);
    };

    this.addToStart = (...toBeAdded) => {
      this.data.unshift(...toBeAdded);
    };

    this.getAndClear = (limit = Infinity) => {
      const allEvents = this.data;
      const [eventsToSend, eventsToStore] = split(allEvents, limit);
      this.data = eventsToStore;
      return eventsToSend;
    };
  }

}

const inMemoryBatchStorage = new InMemoryBatchStorage();

/* global window */
const storageKey = 'fusion-events';

const get = () => {
  try {
    const events = JSON.parse(window.localStorage.getItem(storageKey));
    return Array.isArray(events) ? events : [];
  } catch (e) {
    return [];
  }
};

const set = events => {
  try {
    window.localStorage.setItem(storageKey, JSON.stringify(events));
  } catch (e) {// storage might be full, do nothing
  }
};

class LocalBatchStorage {
  constructor() {
    this.add = (...toBeAdded) => {
      set(toBeAdded.concat(get()));
    };

    this.addToStart = (...toBeAdded) => {
      set(toBeAdded.concat(get()));
    };

    this.getAndClear = (limit = Infinity) => {
      const allEvents = get();
      const [eventsToSend, eventsToStore] = split(allEvents, limit);
      set(eventsToStore);
      return eventsToSend;
    };
  }

}

let isLocalStorageWritable = true;

try {
  window.localStorage.setItem('test', 'test');
  window.localStorage.removeItem('test');
} catch (e) {
  // if set/remove item fails localStorage is not writable
  // fallback to in-memory storage
  isLocalStorageWritable = false;
}

const localBatchStorage = isLocalStorageWritable ? new LocalBatchStorage() : inMemoryBatchStorage;

const UniversalEventsBatchStorageToken = createToken('UniversalEventsBatchStorageToken');

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env browser */
class UniversalEmitter$1 extends UniversalEmitter {
  constructor(fetch, storage, interval = 5000, limit = 1000) {
    super(); //privates

    this.flushBeforeTerminated = () => document.visibilityState === 'hidden' && this.flushInternal();

    this.storage = storage;
    this.flush = this.flushInternal.bind(this);
    this.fetch = fetch;
    this.setFrequency(interval);
    this.limit = limit;
    window.addEventListener('visibilitychange', this.flushBeforeTerminated);
  }

  setFrequency(frequency) {
    window.clearInterval(this.interval);
    this.interval = setInterval(this.flush, frequency);
  }

  emit(type, payload) {
    payload = super.mapEvent(type, payload);
    super.handleEvent(type, payload);
    this.storage.add({
      type,
      payload
    });
  } // match server api


  from() {
    return this;
  }

  flushInternal() {
    return new Promise(function ($return, $error) {
      let items;
      items = this.storage.getAndClear(this.limit);
      if (items.length === 0) return $return();

      var $Try_1_Post = function () {
        try {
          return $return();
        } catch ($boundEx) {
          return $error($boundEx);
        }
      };

      var $Try_1_Catch = function (e) {
        try {
          // sending failed so put the logs back into storage
          this.storage.addToStart(...items);
          return $Try_1_Post();
        } catch ($boundEx) {
          return $error($boundEx);
        }
      }.bind(this);

      try {
        let res;
        return Promise.resolve(this.fetch('/_events', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            items
          })
        })).then(function ($await_2) {
          try {
            res = $await_2;

            if (!res.ok) {
              // If the server responds with a 413, it means the size of the payload was too large.
              // We handle this by cutting our limit in half for the next attempt.
              if (res.status === 413) {
                this.limit = this.limit / 2;
              } // sending failed so put the logs back into storage


              this.storage.addToStart(...items);
            }

            return $Try_1_Post();
          } catch ($boundEx) {
            return $Try_1_Catch($boundEx);
          }
        }.bind(this), $Try_1_Catch);
      } catch (e) {
        $Try_1_Catch(e);
      }
    }.bind(this));
  }

  teardown() {
    window.removeEventListener('visibilitychange', this.flushBeforeTerminated);
    clearInterval(this.interval);
    this.interval = null;
  }

}
const plugin$2 = true && createPlugin({
  deps: {
    fetch: FetchToken,
    storage: UniversalEventsBatchStorageToken.optional
  },
  provides: ({
    fetch,
    storage
  }) => new UniversalEmitter$1(fetch, storage || localBatchStorage),
  cleanup: emitter => new Promise(function ($return, $error) {
    return $return(emitter.teardown());
  })
});

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
const UniversalEventsPlugin = plugin$2; // eslint-disable-next-line prettier/prettier

const UniversalEventsToken = createToken('UniversalEventsToken');

export default UniversalEventsPlugin;
export { UniversalEventsToken, UniversalEventsBatchStorageToken, inMemoryBatchStorage, localBatchStorage };
