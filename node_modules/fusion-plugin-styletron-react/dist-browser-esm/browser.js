/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env browser */

/* global module */
import React from 'react';
import { createPlugin } from 'fusion-core';
import { Provider as StyletronProvider, DebugEngine } from 'styletron-react';
import { Client as Styletron } from 'styletron-engine-atomic';
import { workerRoute, wasmRoute, AtomicPrefixToken } from './constants.js';
import { injectDeclarationCompatMixin } from './inject-declaration-compat-mixin.js';
const StyletronCompat = injectDeclarationCompatMixin(Styletron);
let debugEngine;
let engine;
const plugin = true && createPlugin({
  deps: {
    prefix: AtomicPrefixToken.optional
  },
  middleware: ({
    prefix
  }) => (ctx, next) => {
    if (ctx.element) {
      if (!engine) {
        const config = {
          hydrate: document.getElementsByClassName('_styletron_hydrate_')
        };

        if (prefix !== void 0) {
          config.prefix = prefix;
        }

        engine = new StyletronCompat(config);
      }

      if (process.env.NODE_ENV !== "production" && !debugEngine && typeof Worker !== 'undefined') {
        const worker = new Worker(workerRoute);
        worker.postMessage({
          id: 'init_wasm',
          url: wasmRoute
        });
        worker.postMessage({
          id: 'set_render_interval',
          interval: 180
        });

        if (module.hot) {
          module.hot.addStatusHandler(status => {
            if (status === 'dispose') {
              worker.postMessage({
                id: 'invalidate'
              });
            }
          });
        }

        debugEngine = new DebugEngine(worker);
      }

      ctx.element = React.createElement(StyletronProvider, {
        value: engine,
        debug: debugEngine,
        debugAfterHydration: Boolean(debugEngine)
      }, ctx.element);
    }

    return next();
  }
});
export default plugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJyb3dzZXIuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJjcmVhdGVQbHVnaW4iLCJQcm92aWRlciIsIlN0eWxldHJvblByb3ZpZGVyIiwiRGVidWdFbmdpbmUiLCJDbGllbnQiLCJTdHlsZXRyb24iLCJ3b3JrZXJSb3V0ZSIsIndhc21Sb3V0ZSIsIkF0b21pY1ByZWZpeFRva2VuIiwiaW5qZWN0RGVjbGFyYXRpb25Db21wYXRNaXhpbiIsIlN0eWxldHJvbkNvbXBhdCIsImRlYnVnRW5naW5lIiwiZW5naW5lIiwicGx1Z2luIiwiZGVwcyIsInByZWZpeCIsIm9wdGlvbmFsIiwibWlkZGxld2FyZSIsImN0eCIsIm5leHQiLCJlbGVtZW50IiwiY29uZmlnIiwiaHlkcmF0ZSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsIldvcmtlciIsIndvcmtlciIsInBvc3RNZXNzYWdlIiwiaWQiLCJ1cmwiLCJpbnRlcnZhbCIsIm1vZHVsZSIsImhvdCIsImFkZFN0YXR1c0hhbmRsZXIiLCJzdGF0dXMiLCJCb29sZWFuIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFRQTs7QUFDQTtBQUVBLE9BQU9BLEtBQVAsTUFBa0IsT0FBbEI7QUFDQSxTQUFRQyxZQUFSLFFBQTJCLGFBQTNCO0FBR0EsU0FBUUMsUUFBUSxJQUFJQyxpQkFBcEIsRUFBdUNDLFdBQXZDLFFBQXlELGlCQUF6RDtBQUNBLFNBQVFDLE1BQU0sSUFBSUMsU0FBbEIsUUFBa0MseUJBQWxDO0FBQ0EsU0FBUUMsV0FBUixFQUFxQkMsU0FBckIsRUFBZ0NDLGlCQUFoQyxRQUF3RCxnQkFBeEQ7QUFFQSxTQUFRQyw0QkFBUixRQUEyQyxzQ0FBM0M7QUFFQSxNQUFNQyxlQUFlLEdBQUdELDRCQUE0QixDQUFDSixTQUFELENBQXBEO0FBRUEsSUFBSU0sV0FBSjtBQUNBLElBQUlDLE1BQUo7QUFFQSxNQUFNQyxNQUFNLEdBQ1YsUUFDQWIsWUFBWSxDQUFDO0FBQ1hjLEVBQUFBLElBQUksRUFBRTtBQUNKQyxJQUFBQSxNQUFNLEVBQUVQLGlCQUFpQixDQUFDUTtBQUR0QixHQURLO0FBSVhDLEVBQUFBLFVBQVUsRUFBRSxDQUFDO0FBQUNGLElBQUFBO0FBQUQsR0FBRCxLQUFjLENBQUNHLEdBQUQsRUFBTUMsSUFBTixLQUFlO0FBQ3ZDLFFBQUlELEdBQUcsQ0FBQ0UsT0FBUixFQUFpQjtBQUNmLFVBQUksQ0FBQ1IsTUFBTCxFQUFhO0FBQ1gsY0FBTVMsTUFHTCxHQUFHO0FBQ0ZDLFVBQUFBLE9BQU8sRUFBRUMsUUFBUSxDQUFDQyxzQkFBVCxDQUFnQyxxQkFBaEM7QUFEUCxTQUhKOztBQU1BLFlBQUlULE1BQU0sS0FBSyxLQUFLLENBQXBCLEVBQXVCO0FBQ3JCTSxVQUFBQSxNQUFNLENBQUNOLE1BQVAsR0FBZ0JBLE1BQWhCO0FBQ0Q7O0FBQ0RILFFBQUFBLE1BQU0sR0FBRyxJQUFJRixlQUFKLENBQW9CVyxNQUFwQixDQUFUO0FBQ0Q7O0FBQ0QsVUFBSSx5Q0FBVyxDQUFDVixXQUFaLElBQTJCLE9BQU9jLE1BQVAsS0FBa0IsV0FBakQsRUFBOEQ7QUFDNUQsY0FBTUMsTUFBTSxHQUFHLElBQUlELE1BQUosQ0FBV25CLFdBQVgsQ0FBZjtBQUNBb0IsUUFBQUEsTUFBTSxDQUFDQyxXQUFQLENBQW1CO0FBQ2pCQyxVQUFBQSxFQUFFLEVBQUUsV0FEYTtBQUVqQkMsVUFBQUEsR0FBRyxFQUFFdEI7QUFGWSxTQUFuQjtBQUlBbUIsUUFBQUEsTUFBTSxDQUFDQyxXQUFQLENBQW1CO0FBQ2pCQyxVQUFBQSxFQUFFLEVBQUUscUJBRGE7QUFFakJFLFVBQUFBLFFBQVEsRUFBRTtBQUZPLFNBQW5COztBQUlBLFlBQUtDLE1BQUQsQ0FBY0MsR0FBbEIsRUFBdUI7QUFDcEJELFVBQUFBLE1BQUQsQ0FBY0MsR0FBZCxDQUFrQkMsZ0JBQWxCLENBQW1DQyxNQUFNLElBQUk7QUFDM0MsZ0JBQUlBLE1BQU0sS0FBSyxTQUFmLEVBQTBCO0FBQ3hCUixjQUFBQSxNQUFNLENBQUNDLFdBQVAsQ0FBbUI7QUFBQ0MsZ0JBQUFBLEVBQUUsRUFBRTtBQUFMLGVBQW5CO0FBQ0Q7QUFDRixXQUpEO0FBS0Q7O0FBQ0RqQixRQUFBQSxXQUFXLEdBQUcsSUFBSVIsV0FBSixDQUFnQnVCLE1BQWhCLENBQWQ7QUFDRDs7QUFDRFIsTUFBQUEsR0FBRyxDQUFDRSxPQUFKLEdBQ0Usb0JBQUMsaUJBQUQ7QUFDRSxRQUFBLEtBQUssRUFBRVIsTUFEVDtBQUVFLFFBQUEsS0FBSyxFQUFFRCxXQUZUO0FBR0UsUUFBQSxtQkFBbUIsRUFBRXdCLE9BQU8sQ0FBQ3hCLFdBQUQ7QUFIOUIsU0FLR08sR0FBRyxDQUFDRSxPQUxQLENBREY7QUFTRDs7QUFFRCxXQUFPRCxJQUFJLEVBQVg7QUFDRDtBQWpEVSxDQUFELENBRmQ7QUFzREEsZUFBaUJOLE1BQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIENvcHlyaWdodCAoYykgMjAxOCBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKi9cblxuLyogZXNsaW50LWVudiBicm93c2VyICovXG4vKiBnbG9iYWwgbW9kdWxlICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge2NyZWF0ZVBsdWdpbn0gZnJvbSAnZnVzaW9uLWNvcmUnO1xuaW1wb3J0IHR5cGUge0Z1c2lvblBsdWdpbn0gZnJvbSAnZnVzaW9uLWNvcmUnO1xuXG5pbXBvcnQge1Byb3ZpZGVyIGFzIFN0eWxldHJvblByb3ZpZGVyLCBEZWJ1Z0VuZ2luZX0gZnJvbSAnc3R5bGV0cm9uLXJlYWN0JztcbmltcG9ydCB7Q2xpZW50IGFzIFN0eWxldHJvbn0gZnJvbSAnc3R5bGV0cm9uLWVuZ2luZS1hdG9taWMnO1xuaW1wb3J0IHt3b3JrZXJSb3V0ZSwgd2FzbVJvdXRlLCBBdG9taWNQcmVmaXhUb2tlbn0gZnJvbSAnLi9jb25zdGFudHMuanMnO1xuXG5pbXBvcnQge2luamVjdERlY2xhcmF0aW9uQ29tcGF0TWl4aW59IGZyb20gJy4vaW5qZWN0LWRlY2xhcmF0aW9uLWNvbXBhdC1taXhpbi5qcyc7XG5cbmNvbnN0IFN0eWxldHJvbkNvbXBhdCA9IGluamVjdERlY2xhcmF0aW9uQ29tcGF0TWl4aW4oU3R5bGV0cm9uKTtcblxubGV0IGRlYnVnRW5naW5lO1xubGV0IGVuZ2luZTtcblxuY29uc3QgcGx1Z2luID1cbiAgX19CUk9XU0VSX18gJiZcbiAgY3JlYXRlUGx1Z2luKHtcbiAgICBkZXBzOiB7XG4gICAgICBwcmVmaXg6IEF0b21pY1ByZWZpeFRva2VuLm9wdGlvbmFsLFxuICAgIH0sXG4gICAgbWlkZGxld2FyZTogKHtwcmVmaXh9KSA9PiAoY3R4LCBuZXh0KSA9PiB7XG4gICAgICBpZiAoY3R4LmVsZW1lbnQpIHtcbiAgICAgICAgaWYgKCFlbmdpbmUpIHtcbiAgICAgICAgICBjb25zdCBjb25maWc6IHtcbiAgICAgICAgICAgIGh5ZHJhdGU6IEhUTUxDb2xsZWN0aW9uPEhUTUxFbGVtZW50PixcbiAgICAgICAgICAgIHByZWZpeD86IHN0cmluZyxcbiAgICAgICAgICB9ID0ge1xuICAgICAgICAgICAgaHlkcmF0ZTogZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnX3N0eWxldHJvbl9oeWRyYXRlXycpLFxuICAgICAgICAgIH07XG4gICAgICAgICAgaWYgKHByZWZpeCAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBjb25maWcucHJlZml4ID0gcHJlZml4O1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbmdpbmUgPSBuZXcgU3R5bGV0cm9uQ29tcGF0KGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9fREVWX18gJiYgIWRlYnVnRW5naW5lICYmIHR5cGVvZiBXb3JrZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgY29uc3Qgd29ya2VyID0gbmV3IFdvcmtlcih3b3JrZXJSb3V0ZSk7XG4gICAgICAgICAgd29ya2VyLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgIGlkOiAnaW5pdF93YXNtJyxcbiAgICAgICAgICAgIHVybDogd2FzbVJvdXRlLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHdvcmtlci5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICBpZDogJ3NldF9yZW5kZXJfaW50ZXJ2YWwnLFxuICAgICAgICAgICAgaW50ZXJ2YWw6IDE4MCxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAoKG1vZHVsZTogYW55KS5ob3QpIHtcbiAgICAgICAgICAgIChtb2R1bGU6IGFueSkuaG90LmFkZFN0YXR1c0hhbmRsZXIoc3RhdHVzID0+IHtcbiAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gJ2Rpc3Bvc2UnKSB7XG4gICAgICAgICAgICAgICAgd29ya2VyLnBvc3RNZXNzYWdlKHtpZDogJ2ludmFsaWRhdGUnfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkZWJ1Z0VuZ2luZSA9IG5ldyBEZWJ1Z0VuZ2luZSh3b3JrZXIpO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5lbGVtZW50ID0gKFxuICAgICAgICAgIDxTdHlsZXRyb25Qcm92aWRlclxuICAgICAgICAgICAgdmFsdWU9e2VuZ2luZX1cbiAgICAgICAgICAgIGRlYnVnPXtkZWJ1Z0VuZ2luZX1cbiAgICAgICAgICAgIGRlYnVnQWZ0ZXJIeWRyYXRpb249e0Jvb2xlYW4oZGVidWdFbmdpbmUpfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtjdHguZWxlbWVudH1cbiAgICAgICAgICA8L1N0eWxldHJvblByb3ZpZGVyPlxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV4dCgpO1xuICAgIH0sXG4gIH0pO1xuXG5leHBvcnQgZGVmYXVsdCAoKHBsdWdpbjogYW55KTogRnVzaW9uUGx1Z2luPCosICo+KTtcbiJdfQ==