"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _styletronEngineAtomic = require("styletron-engine-atomic");

var _injectDeclarationCompatMixin = require("./inject-declaration-compat-mixin.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env browser */

/* global module */
const StyletronCompat = (0, _injectDeclarationCompatMixin.injectDeclarationCompatMixin)(_styletronEngineAtomic.Client);
let debugEngine;
let engine;
const plugin = false && createPlugin({
  deps: {
    prefix: AtomicPrefixToken.optional
  },
  middleware: ({
    prefix
  }) => (ctx, next) => {
    if (ctx.element) {
      if (!engine) {
        const config = {
          hydrate: document.getElementsByClassName('_styletron_hydrate_')
        };

        if (prefix !== void 0) {
          config.prefix = prefix;
        }

        engine = new StyletronCompat(config);
      }

      if (process.env.NODE_ENV !== "production" && !debugEngine && typeof Worker !== 'undefined') {
        const worker = new Worker(workerRoute);
        worker.postMessage({
          id: 'init_wasm',
          url: wasmRoute
        });
        worker.postMessage({
          id: 'set_render_interval',
          interval: 180
        });

        if (module.hot) {
          module.hot.addStatusHandler(status => {
            if (status === 'dispose') {
              worker.postMessage({
                id: 'invalidate'
              });
            }
          });
        }

        debugEngine = new DebugEngine(worker);
      }

      ctx.element = _react.default.createElement(StyletronProvider, {
        value: engine,
        debug: debugEngine,
        debugAfterHydration: Boolean(debugEngine)
      }, ctx.element);
    }

    return next();
  }
});
var _default = plugin;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJyb3dzZXIuanMiXSwibmFtZXMiOlsiU3R5bGV0cm9uQ29tcGF0IiwiU3R5bGV0cm9uIiwiZGVidWdFbmdpbmUiLCJlbmdpbmUiLCJwbHVnaW4iLCJjcmVhdGVQbHVnaW4iLCJkZXBzIiwicHJlZml4IiwiQXRvbWljUHJlZml4VG9rZW4iLCJvcHRpb25hbCIsIm1pZGRsZXdhcmUiLCJjdHgiLCJuZXh0IiwiZWxlbWVudCIsImNvbmZpZyIsImh5ZHJhdGUiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJXb3JrZXIiLCJ3b3JrZXIiLCJ3b3JrZXJSb3V0ZSIsInBvc3RNZXNzYWdlIiwiaWQiLCJ1cmwiLCJ3YXNtUm91dGUiLCJpbnRlcnZhbCIsIm1vZHVsZSIsImhvdCIsImFkZFN0YXR1c0hhbmRsZXIiLCJzdGF0dXMiLCJEZWJ1Z0VuZ2luZSIsIkJvb2xlYW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFXQTs7QUFLQTs7QUFHQTs7OztBQW5CQTs7Ozs7Ozs7QUFRQTs7QUFDQTtBQVlBLE1BQU1BLGVBQWUsR0FBRyxnRUFBNkJDLDZCQUE3QixDQUF4QjtBQUVBLElBQUlDLFdBQUo7QUFDQSxJQUFJQyxNQUFKO0FBRUEsTUFBTUMsTUFBTSxHQUNWLFNBQ0FDLFlBQVksQ0FBQztBQUNYQyxFQUFBQSxJQUFJLEVBQUU7QUFDSkMsSUFBQUEsTUFBTSxFQUFFQyxpQkFBaUIsQ0FBQ0M7QUFEdEIsR0FESztBQUlYQyxFQUFBQSxVQUFVLEVBQUUsQ0FBQztBQUFDSCxJQUFBQTtBQUFELEdBQUQsS0FBYyxDQUFDSSxHQUFELEVBQU1DLElBQU4sS0FBZTtBQUN2QyxRQUFJRCxHQUFHLENBQUNFLE9BQVIsRUFBaUI7QUFDZixVQUFJLENBQUNWLE1BQUwsRUFBYTtBQUNYLGNBQU1XLE1BR0wsR0FBRztBQUNGQyxVQUFBQSxPQUFPLEVBQUVDLFFBQVEsQ0FBQ0Msc0JBQVQsQ0FBZ0MscUJBQWhDO0FBRFAsU0FISjs7QUFNQSxZQUFJVixNQUFNLEtBQUssS0FBSyxDQUFwQixFQUF1QjtBQUNyQk8sVUFBQUEsTUFBTSxDQUFDUCxNQUFQLEdBQWdCQSxNQUFoQjtBQUNEOztBQUNESixRQUFBQSxNQUFNLEdBQUcsSUFBSUgsZUFBSixDQUFvQmMsTUFBcEIsQ0FBVDtBQUNEOztBQUNELFVBQUkseUNBQVcsQ0FBQ1osV0FBWixJQUEyQixPQUFPZ0IsTUFBUCxLQUFrQixXQUFqRCxFQUE4RDtBQUM1RCxjQUFNQyxNQUFNLEdBQUcsSUFBSUQsTUFBSixDQUFXRSxXQUFYLENBQWY7QUFDQUQsUUFBQUEsTUFBTSxDQUFDRSxXQUFQLENBQW1CO0FBQ2pCQyxVQUFBQSxFQUFFLEVBQUUsV0FEYTtBQUVqQkMsVUFBQUEsR0FBRyxFQUFFQztBQUZZLFNBQW5CO0FBSUFMLFFBQUFBLE1BQU0sQ0FBQ0UsV0FBUCxDQUFtQjtBQUNqQkMsVUFBQUEsRUFBRSxFQUFFLHFCQURhO0FBRWpCRyxVQUFBQSxRQUFRLEVBQUU7QUFGTyxTQUFuQjs7QUFJQSxZQUFLQyxNQUFELENBQWNDLEdBQWxCLEVBQXVCO0FBQ3BCRCxVQUFBQSxNQUFELENBQWNDLEdBQWQsQ0FBa0JDLGdCQUFsQixDQUFtQ0MsTUFBTSxJQUFJO0FBQzNDLGdCQUFJQSxNQUFNLEtBQUssU0FBZixFQUEwQjtBQUN4QlYsY0FBQUEsTUFBTSxDQUFDRSxXQUFQLENBQW1CO0FBQUNDLGdCQUFBQSxFQUFFLEVBQUU7QUFBTCxlQUFuQjtBQUNEO0FBQ0YsV0FKRDtBQUtEOztBQUNEcEIsUUFBQUEsV0FBVyxHQUFHLElBQUk0QixXQUFKLENBQWdCWCxNQUFoQixDQUFkO0FBQ0Q7O0FBQ0RSLE1BQUFBLEdBQUcsQ0FBQ0UsT0FBSixHQUNFLDZCQUFDLGlCQUFEO0FBQ0UsUUFBQSxLQUFLLEVBQUVWLE1BRFQ7QUFFRSxRQUFBLEtBQUssRUFBRUQsV0FGVDtBQUdFLFFBQUEsbUJBQW1CLEVBQUU2QixPQUFPLENBQUM3QixXQUFEO0FBSDlCLFNBS0dTLEdBQUcsQ0FBQ0UsT0FMUCxDQURGO0FBU0Q7O0FBRUQsV0FBT0QsSUFBSSxFQUFYO0FBQ0Q7QUFqRFUsQ0FBRCxDQUZkO2VBc0RpQlIsTSIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBDb3B5cmlnaHQgKGMpIDIwMTggVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuLyogZ2xvYmFsIG1vZHVsZSAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtjcmVhdGVQbHVnaW59IGZyb20gJ2Z1c2lvbi1jb3JlJztcbmltcG9ydCB0eXBlIHtGdXNpb25QbHVnaW59IGZyb20gJ2Z1c2lvbi1jb3JlJztcblxuaW1wb3J0IHtQcm92aWRlciBhcyBTdHlsZXRyb25Qcm92aWRlciwgRGVidWdFbmdpbmV9IGZyb20gJ3N0eWxldHJvbi1yZWFjdCc7XG5pbXBvcnQge0NsaWVudCBhcyBTdHlsZXRyb259IGZyb20gJ3N0eWxldHJvbi1lbmdpbmUtYXRvbWljJztcbmltcG9ydCB7d29ya2VyUm91dGUsIHdhc21Sb3V0ZSwgQXRvbWljUHJlZml4VG9rZW59IGZyb20gJy4vY29uc3RhbnRzLmpzJztcblxuaW1wb3J0IHtpbmplY3REZWNsYXJhdGlvbkNvbXBhdE1peGlufSBmcm9tICcuL2luamVjdC1kZWNsYXJhdGlvbi1jb21wYXQtbWl4aW4uanMnO1xuXG5jb25zdCBTdHlsZXRyb25Db21wYXQgPSBpbmplY3REZWNsYXJhdGlvbkNvbXBhdE1peGluKFN0eWxldHJvbik7XG5cbmxldCBkZWJ1Z0VuZ2luZTtcbmxldCBlbmdpbmU7XG5cbmNvbnN0IHBsdWdpbiA9XG4gIF9fQlJPV1NFUl9fICYmXG4gIGNyZWF0ZVBsdWdpbih7XG4gICAgZGVwczoge1xuICAgICAgcHJlZml4OiBBdG9taWNQcmVmaXhUb2tlbi5vcHRpb25hbCxcbiAgICB9LFxuICAgIG1pZGRsZXdhcmU6ICh7cHJlZml4fSkgPT4gKGN0eCwgbmV4dCkgPT4ge1xuICAgICAgaWYgKGN0eC5lbGVtZW50KSB7XG4gICAgICAgIGlmICghZW5naW5lKSB7XG4gICAgICAgICAgY29uc3QgY29uZmlnOiB7XG4gICAgICAgICAgICBoeWRyYXRlOiBIVE1MQ29sbGVjdGlvbjxIVE1MRWxlbWVudD4sXG4gICAgICAgICAgICBwcmVmaXg/OiBzdHJpbmcsXG4gICAgICAgICAgfSA9IHtcbiAgICAgICAgICAgIGh5ZHJhdGU6IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ19zdHlsZXRyb25faHlkcmF0ZV8nKSxcbiAgICAgICAgICB9O1xuICAgICAgICAgIGlmIChwcmVmaXggIT09IHZvaWQgMCkge1xuICAgICAgICAgICAgY29uZmlnLnByZWZpeCA9IHByZWZpeDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZW5naW5lID0gbmV3IFN0eWxldHJvbkNvbXBhdChjb25maWcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfX0RFVl9fICYmICFkZWJ1Z0VuZ2luZSAmJiB0eXBlb2YgV29ya2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGNvbnN0IHdvcmtlciA9IG5ldyBXb3JrZXIod29ya2VyUm91dGUpO1xuICAgICAgICAgIHdvcmtlci5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICBpZDogJ2luaXRfd2FzbScsXG4gICAgICAgICAgICB1cmw6IHdhc21Sb3V0ZSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB3b3JrZXIucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgaWQ6ICdzZXRfcmVuZGVyX2ludGVydmFsJyxcbiAgICAgICAgICAgIGludGVydmFsOiAxODAsXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKChtb2R1bGU6IGFueSkuaG90KSB7XG4gICAgICAgICAgICAobW9kdWxlOiBhbnkpLmhvdC5hZGRTdGF0dXNIYW5kbGVyKHN0YXR1cyA9PiB7XG4gICAgICAgICAgICAgIGlmIChzdGF0dXMgPT09ICdkaXNwb3NlJykge1xuICAgICAgICAgICAgICAgIHdvcmtlci5wb3N0TWVzc2FnZSh7aWQ6ICdpbnZhbGlkYXRlJ30pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGVidWdFbmdpbmUgPSBuZXcgRGVidWdFbmdpbmUod29ya2VyKTtcbiAgICAgICAgfVxuICAgICAgICBjdHguZWxlbWVudCA9IChcbiAgICAgICAgICA8U3R5bGV0cm9uUHJvdmlkZXJcbiAgICAgICAgICAgIHZhbHVlPXtlbmdpbmV9XG4gICAgICAgICAgICBkZWJ1Zz17ZGVidWdFbmdpbmV9XG4gICAgICAgICAgICBkZWJ1Z0FmdGVySHlkcmF0aW9uPXtCb29sZWFuKGRlYnVnRW5naW5lKX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7Y3R4LmVsZW1lbnR9XG4gICAgICAgICAgPC9TdHlsZXRyb25Qcm92aWRlcj5cbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICB9LFxuICB9KTtcblxuZXhwb3J0IGRlZmF1bHQgKChwbHVnaW46IGFueSk6IEZ1c2lvblBsdWdpbjwqLCAqPik7XG4iXX0=