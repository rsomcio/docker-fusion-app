import { createElement, Component, Children } from 'react';
import PropTypes from 'prop-types';
import { __RouterContext, Router, Route, BrowserRouter, HashRouter, Link, MemoryRouter, NavLink, Prompt, Switch, matchPath, withRouter, useHistory, useParams, useRouteMatch, useLocation } from 'react-router-dom';
import { createBrowserHistory } from 'history';
import { UniversalEventsToken } from 'fusion-plugin-universal-events';
import { createPlugin, createToken, unescape, memoize, RouteTagsToken } from 'fusion-core';

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
class Status extends Component {
  constructor(props, context) {
    super(props, context);
    const {
      router: {
        staticContext
      } = {}
    } = context;

    if (staticContext && staticContext.setCode) {
      staticContext.setCode(parseInt(this.props.code, 10));
    }
  }

  render() {
    return this.props.children;
  }

}
Status.contextTypes = {
  router: PropTypes.shape({
    staticContext: PropTypes.object
  })
};
const NotFound = props => createElement(Status, {
  code: 404
}, props.children);

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
class Lifecycle extends Component {
  constructor(props) {
    super(props);
    if (this.props.onConstruct) this.props.onConstruct.call(this, this);
  }

  componentDidMount() {
    if (this.props.onMount) this.props.onMount.call(this, this);
  }

  render() {
    return null;
  }

}

class Redirect extends Component {
  isStatic(context = this.context) {
    return !!(context && context.router && context.router.staticContext);
  }

  perform(history, staticContext) {
    const {
      push,
      to,
      code
    } = this.props;

    if (push) {
      history.push(to);
    } else {
      history.replace(to);
    }
  }

  render() {
    return createElement(__RouterContext.Consumer, null, context => {
      const history = context.history;
      const staticContext = this.context.router && this.context.router.staticContext;

      const perform = () => this.perform(history, staticContext);

      const props = this.isStatic() ? {
        onConstruct: perform
      } : {
        onMount: perform
      };
      return createElement(Lifecycle, props);
    });
  }

}
Redirect.defaultProps = {
  push: false,
  code: 307
};
Redirect.contextTypes = {
  router: PropTypes.shape({
    staticContext: PropTypes.object
  })
}; // Sanity type checking

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
const ReactRouterRoute = Route;

const isEmptyChildren = children => Children.count(children) === 0;

function Route$1(props, context) {
  const {
    trackingId,
    component,
    render,
    children
  } = props,
        remainingProps = _objectWithoutProperties(props, ["trackingId", "component", "render", "children"]);

  return createElement(ReactRouterRoute, _extends({}, remainingProps, {
    // eslint-disable-next-line react/no-children-prop
    children: routeProps => {
      const {
        match
      } = routeProps;

      if (match && match.isExact) {
        if (typeof context.onRoute === 'function') {
          context.onRoute({
            page: match.path,
            title: trackingId || match.path,
            params: match.params
          });
        }
      }

      if (component) return match ? createElement(component, routeProps) : null;
      if (render) return match ? render(routeProps) : null;
      if (typeof children === 'function') return children(routeProps);
      if (children && !isEmptyChildren(children)) return Children.only(children);
      return null;
    }
  }));
}

Route$1.contextTypes = {
  onRoute: PropTypes.func
};
Route$1.displayName = 'FusionRoute';

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
class BrowserRouter$2 extends Component {
  constructor(props, context) {
    super(props, context);
    this.lastTitle = null;
  }

  getChildContext() {
    const {
      __IS_PREPARE__
    } = this.context;
    return {
      onRoute: routeData => {
        if (routeData.title !== this.lastTitle && !__IS_PREPARE__) {
          this.lastTitle = routeData.title;
          this.props.onRoute && this.props.onRoute(routeData);
        }
      }
    };
  }

  render() {
    const {
      Provider,
      history,
      basename
    } = this.props;
    if (!Provider) throw new Error('Missing Provider for Browser Router');
    return (// $FlowFixMe
      createElement(Provider, {
        basename: basename,
        history: history
      }, this.props.children)
    );
  }

}

BrowserRouter$2.defaultProps = {
  onRoute: () => {},
  Provider: Router
};
BrowserRouter$2.propTypes = {
  children: PropTypes.node,
  onRoute: PropTypes.func,
  history: PropTypes.object,
  Provider: PropTypes.any,
  basename: PropTypes.string
};
BrowserRouter$2.contextTypes = {
  __IS_PREPARE__: PropTypes.bool
};
BrowserRouter$2.childContextTypes = {
  onRoute: PropTypes.func.isRequired
};
const BrowserRouterTyped = BrowserRouter$2;

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
/**
 * Cast each of these imports from react-router-dom to a copied-version of their
 * types.  This is necessary as the libdef defined types will not be accessible to
 * consumers of this package.
 */
const BrowserRouter$3 = BrowserRouter;
const HashRouter$2 = HashRouter;
const Link$2 = Link;
const MemoryRouter$2 = MemoryRouter;
const NavLink$2 = NavLink;
const Prompt$2 = Prompt;
const Switch$2 = Switch;
const matchPath$2 = matchPath;
const withRouter$2 = withRouter;
const useHistory$2 = useHistory;
const useRouteMatch$2 = useRouteMatch;
const useLocation$2 = useLocation;
const useParams$2 = useParams;

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
const RouterProviderToken = createToken('RouterProvider');
const RouterToken = createToken('Router');
const Router$1 = BrowserRouterTyped;
// Preserve browser history instance across HMR
let browserHistory;
const plugin = createPlugin({
  deps: {
    emitter: UniversalEventsToken.optional,
    Provider: RouterProviderToken.optional,
    RouteTags: RouteTagsToken
  },
  middleware: ({
    RouteTags,
    emitter,
    Provider = Router
  }, self) => (ctx, next) => new Promise(function ($return, $error) {
    const tags = RouteTags.from(ctx);
    const prefix = ctx.prefix || '';

    if (!ctx.element) {
      return $return(next());
    }

    const myAPI = self.from(ctx);

    {
      // TODO(#3): We should consider adding render/downstream/upstream timings for the browser
      let pageData = {};
      const element = document.getElementById('__ROUTER_DATA__');

      if (element) {
        pageData = JSON.parse(unescape(element.textContent));
        tags.name = pageData.title;
        tags.page = pageData.page;
      }

      emitter && emitter.map(payload => {
        if (payload && typeof payload === 'object') {
          payload.__url__ = pageData.title;
          payload.__urlParams__ = pageData.params;
        }

        return payload;
      }); // preserving browser history across hmr fixes warning "Warning: You cannot change <Router history>"
      // we don't want to preserve the `browserHistory` instance across jsdom tests however, as it will cause
      // routes to match based on the previous location information.

      if (!browserHistory || process.env.NODE_ENV !== "production" && typeof window.jsdom !== 'undefined') {
        browserHistory = createBrowserHistory({
          basename: ctx.prefix
        });
      } // Expose the history object


      myAPI.history = browserHistory;
      ctx.element = createElement(Router$1, {
        history: browserHistory,
        Provider: Provider,
        basename: ctx.prefix,
        onRoute: payload => {
          pageData = payload;
          tags.name = pageData.title;
          tags.page = pageData.page;
          emitter && emitter.emit('pageview:browser', payload);
        }
      }, ctx.element);
      return $return(next());
    }

    return $return();
  }),

  provides() {
    return {
      from: memoize(() => {
        const api = {
          history: null
        };
        return api;
      })
    };
  }

});

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* Custom types */

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
const BrowserRouter$4 = BrowserRouter$3;
const HashRouter$3 = HashRouter$2;
const Link$3 = Link$2;
const matchPath$3 = matchPath$2;
const MemoryRouter$3 = MemoryRouter$2;
const NavLink$3 = NavLink$2;
const Prompt$3 = Prompt$2;
const Route$2 = Route$1;
const Router$2 = BrowserRouterTyped;
const Switch$3 = Switch$2;
const withRouter$3 = withRouter$2;
const NotFound$1 = NotFound;
const Redirect$1 = Redirect;
const Status$1 = Status;
const useHistory$3 = useHistory$2;
const useRouteMatch$3 = useRouteMatch$2;
const useLocation$3 = useLocation$2;
const useParams$3 = useParams$2;

export default plugin;
export { BrowserRouter$4 as BrowserRouter, HashRouter$3 as HashRouter, Link$3 as Link, matchPath$3 as matchPath, MemoryRouter$3 as MemoryRouter, NavLink$3 as NavLink, NotFound$1 as NotFound, Prompt$3 as Prompt, Redirect$1 as Redirect, Route$2 as Route, Router$2 as Router, Status$1 as Status, Switch$3 as Switch, withRouter$3 as withRouter, RouterProviderToken, RouterToken, useHistory$3 as useHistory, useRouteMatch$3 as useRouteMatch, useLocation$3 as useLocation, useParams$3 as useParams };
