{"version":3,"file":"react-ssr-prepass.production.min.js","sources":["../src/symbols.js","../src/element.js","../src/internals/context.js","../src/internals/dispatcher.js","../src/render/lazyComponent.js","../src/render/functionComponent.js","../src/render/classComponent.js","../src/visitor.js","../src/index.js"],"sourcesContent":["// @flow\n\nimport type { Node } from 'react'\nimport * as is from 'react-is'\n\n/** Literal types representing the ReactSymbol values. These values do not actually match the values from react-is! */\nexport type ReactSymbol =\n  | 'react.element' /* 0xeac7 | Symbol(react.element) */\n  | 'react.portal' /* 0xeaca | Symbol(react.portal) */\n  | 'react.fragment' /* 0xeacb | Symbol(react.fragment) */\n  | 'react.strict_mode' /* 0xeacc | Symbol(react.strict_mode) */\n  | 'react.profiler' /* 0xead2 | Symbol(react.profiler) */\n  | 'react.provider' /* 0xeacd | Symbol(react.provider) */\n  | 'react.context' /* 0xeace | Symbol(react.context) */\n  | 'react.concurrent_mode' /* 0xeacf | Symbol(react.concurrent_mode) */\n  | 'react.forward_ref' /* 0xead0 | Symbol(react.forward_ref) */\n  | 'react.suspense' /* 0xead1 | Symbol(react.suspense) */\n  | 'react.memo' /* 0xead3 | Symbol(react.memo) */\n  | 'react.lazy' /* 0xead4 | Symbol(react.lazy) */\n\nexport const REACT_ELEMENT_TYPE: 'react.element' = is.Element\nexport const REACT_PORTAL_TYPE: 'react.portal' = is.Portal\nexport const REACT_FRAGMENT_TYPE: 'react.fragment' = is.Fragment\nexport const REACT_STRICT_MODE_TYPE: 'react.strict_mode' = is.StrictMode\nexport const REACT_PROFILER_TYPE: 'react.profiler' = is.Profiler\nexport const REACT_PROVIDER_TYPE: 'react.provider' = is.ContextProvider\nexport const REACT_CONTEXT_TYPE: 'react.context' = is.ContextConsumer\nexport const REACT_CONCURRENT_MODE_TYPE: 'react.concurrent_mode' =\n  is.ConcurrentMode\nexport const REACT_FORWARD_REF_TYPE: 'react.forward_ref' = is.ForwardRef\nexport const REACT_SUSPENSE_TYPE: 'react.suspense' = is.Suspense\nexport const REACT_MEMO_TYPE: 'react.memo' = is.Memo\nexport const REACT_LAZY_TYPE: 'react.lazy' = is.Lazy\n","// @flow\n\nimport { Children, type Node, type Element, type ComponentType } from 'react'\nimport type { AbstractContext, AbstractElement } from './types'\nimport * as ReactIs from 'react-is'\n\nimport {\n  type ReactSymbol,\n  REACT_ELEMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_CONTEXT_TYPE,\n  REACT_CONCURRENT_MODE_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE\n} from './symbols'\n\n/** Is a given Component a class component */\nexport const shouldConstruct = (Comp: ComponentType<*>): boolean %checks =>\n  (Comp: any).prototype && (Comp: any).prototype.isReactComponent\n\n/** Determine the type of element using react-is with applied fixes */\nexport const typeOf = (x: AbstractElement): ReactSymbol | void => {\n  switch (x.$$typeof) {\n    case REACT_PORTAL_TYPE:\n      return REACT_PORTAL_TYPE\n    case REACT_ELEMENT_TYPE:\n      switch (x.type) {\n        case REACT_CONCURRENT_MODE_TYPE:\n          return REACT_CONCURRENT_MODE_TYPE\n        case REACT_FRAGMENT_TYPE:\n          return REACT_FRAGMENT_TYPE\n        case REACT_PROFILER_TYPE:\n          return REACT_PROFILER_TYPE\n        case REACT_STRICT_MODE_TYPE:\n          return REACT_STRICT_MODE_TYPE\n        case REACT_SUSPENSE_TYPE:\n          return REACT_SUSPENSE_TYPE\n\n        default: {\n          switch (x.type && ((x.type: any).$$typeof: ReactSymbol)) {\n            case REACT_LAZY_TYPE:\n              return REACT_LAZY_TYPE\n            case REACT_MEMO_TYPE:\n              return REACT_MEMO_TYPE\n            case REACT_CONTEXT_TYPE:\n              return REACT_CONTEXT_TYPE\n            case REACT_PROVIDER_TYPE:\n              return REACT_PROVIDER_TYPE\n            case REACT_FORWARD_REF_TYPE:\n              return REACT_FORWARD_REF_TYPE\n            default:\n              return REACT_ELEMENT_TYPE\n          }\n        }\n      }\n\n    default:\n      return undefined\n  }\n}\n\ntype ScalarNode = null | boolean | string | number\n\n/** Rebound Children.toArray with modified AbstractElement types */\nconst toArray: (node?: Node) => Array<ScalarNode | AbstractElement> =\n  Children.toArray\n\n/** Checks whether the `node` is an AbstractElement */\nconst isAbstractElement = (\n  node: ScalarNode | AbstractElement\n): boolean %checks =>\n  node !== null && typeof node === 'object'\n\n/** Returns a flat AbstractElement array for a given AbstractElement node */\nexport const getChildrenArray = (node?: Node): AbstractElement[] => {\n  // $FlowFixMe\n  return toArray(node).filter(isAbstractElement)\n}\n\n/** Returns merged props given a props and defaultProps object */\nexport const computeProps = (props: Object, defaultProps: void | Object) => {\n  return typeof defaultProps === 'object'\n    ? Object.assign({}, defaultProps, props)\n    : props\n}\n","// @flow\n\nimport type {\n  AbstractContext,\n  UserElement,\n  ContextMap,\n  ContextStore,\n  ContextEntry\n} from '../types'\n\n/** The context is kept as a Map from a Context value to the current\n   value on the React element tree.\n   The legacy context is kept as a simple object.\n   When the tree is being walked modifications are made by assigning\n   new legacy context maps or new context values.\n   These changes are kept in the `prev` variables and must be flushed\n   before continuing to walk the tree.\n   After walking the children they can be restored.\n   This way the context recursively restores itself on the way up. */\n\nlet currentContextStore: ContextStore = new Map()\nlet currentContextMap: ContextMap = {}\n\nlet prevContextMap: void | ContextMap = undefined\nlet prevContextEntry: void | ContextEntry = undefined\n\nexport const getCurrentContextMap = (): ContextMap =>\n  Object.assign({}, currentContextMap)\nexport const getCurrentContextStore = (): ContextStore =>\n  new Map(currentContextStore)\n\nexport const flushPrevContextMap = (): void | ContextMap => {\n  const prev = prevContextMap\n  prevContextMap = undefined\n  return prev\n}\n\nexport const flushPrevContextStore = (): void | ContextEntry => {\n  const prev = prevContextEntry\n  prevContextEntry = undefined\n  return prev\n}\n\nexport const restoreContextMap = (prev: void | ContextMap) => {\n  if (prev !== undefined) {\n    Object.assign(currentContextMap, prev)\n  }\n}\n\nexport const restoreContextStore = (prev: void | ContextEntry) => {\n  if (prev !== undefined) {\n    currentContextStore.set(prev[0], prev[1])\n  }\n}\n\nexport const setCurrentContextMap = (map: ContextMap) => {\n  prevContextMap = undefined\n  currentContextMap = map\n}\n\nexport const setCurrentContextStore = (store: ContextStore) => {\n  prevContextEntry = undefined\n  currentContextStore = store\n}\n\nexport const assignContextMap = (map: ContextMap) => {\n  prevContextMap = {}\n  for (const name in map) {\n    prevContextMap[name] = currentContextMap[name]\n    currentContextMap[name] = map[name]\n  }\n}\n\nexport const setContextValue = (context: AbstractContext, value: mixed) => {\n  prevContextEntry = [context, currentContextStore.get(context)]\n  currentContextStore.set(context, value)\n}\n\nexport const readContextValue = (context: AbstractContext) => {\n  const value = currentContextStore.get(context)\n  if (value !== undefined) {\n    return value\n  }\n\n  // Return default if context has no value yet\n  return context._currentValue\n}\n\nconst emptyContext = {}\n\nexport const maskContext = (type: $PropertyType<UserElement, 'type'>) => {\n  const { contextType, contextTypes } = type\n\n  if (contextType) {\n    return readContextValue(contextType)\n  } else if (!contextTypes) {\n    return emptyContext\n  }\n\n  const maskedContext = {}\n  for (const name in contextTypes) {\n    maskedContext[name] = currentContextMap[name]\n  }\n\n  return maskedContext\n}\n","// @flow\n// Source: https://github.com/facebook/react/blob/c21c41e/packages/react-dom/src/server/ReactPartialRendererHooks.js\n\nimport is from 'object-is'\nimport { readContextValue } from './context'\n\nimport type {\n  AbstractContext,\n  BasicStateAction,\n  Dispatch,\n  Update,\n  UpdateQueue,\n  Hook\n} from '../types'\n\nexport opaque type Identity = {}\n\nlet currentIdentity: Identity | null = null\n\nexport const makeIdentity = (): Identity => ({})\n\nexport const setCurrentIdentity = (id: Identity | null) => {\n  currentIdentity = id\n}\n\nexport const getCurrentIdentity = (): Identity => {\n  if (currentIdentity === null) {\n    throw new Error(\n      '[react-ssr-prepass] Hooks can only be called inside the body of a function component. ' +\n        '(https://fb.me/react-invalid-hook-call)'\n    )\n  }\n\n  // NOTE: The warning that is used in ReactPartialRendererHooks is obsolete\n  // in a prepass, since it'll be caught by a subsequent renderer anyway\n  // https://github.com/facebook/react/blob/c21c41e/packages/react-dom/src/server/ReactPartialRendererHooks.js#L63-L71\n\n  return (currentIdentity: Identity)\n}\n\nlet firstWorkInProgressHook: Hook | null = null\nlet workInProgressHook: Hook | null = null\n// Whether the work-in-progress hook is a re-rendered hook\nlet isReRender: boolean = false\n// Whether an update was scheduled during the currently executing render pass.\nlet didScheduleRenderPhaseUpdate: boolean = false\n// Lazily created map of render-phase updates\nlet renderPhaseUpdates: Map<UpdateQueue<any>, Update<any>> | null = null\n// Counter to prevent infinite loops.\nlet numberOfReRenders: number = 0\nconst RE_RENDER_LIMIT = 25\n\nexport const getFirstHook = (): Hook | null => firstWorkInProgressHook\n\nexport const setFirstHook = (hook: Hook | null) => {\n  firstWorkInProgressHook = hook\n}\n\nfunction areHookInputsEqual(\n  nextDeps: Array<mixed>,\n  prevDeps: Array<mixed> | null\n) {\n  // NOTE: The warnings that are used in ReactPartialRendererHooks are obsolete\n  // in a prepass, since these issues will be caught by a subsequent renderer anyway\n  if (prevDeps === null) {\n    return false\n  }\n\n  for (let i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n    if (!is(nextDeps[i], prevDeps[i])) {\n      return false\n    }\n  }\n\n  return true\n}\n\nfunction createHook(): Hook {\n  return {\n    memoizedState: null,\n    queue: null,\n    next: null\n  }\n}\n\nfunction createWorkInProgressHook(): Hook {\n  if (workInProgressHook === null) {\n    // This is the first hook in the list\n    if (firstWorkInProgressHook === null) {\n      isReRender = false\n      firstWorkInProgressHook = workInProgressHook = createHook()\n    } else {\n      // There's already a work-in-progress. Reuse it.\n      isReRender = true\n      workInProgressHook = firstWorkInProgressHook\n    }\n  } else {\n    if (workInProgressHook.next === null) {\n      isReRender = false\n      // Append to the end of the list\n      workInProgressHook = workInProgressHook.next = createHook()\n    } else {\n      // There's already a work-in-progress. Reuse it.\n      isReRender = true\n      workInProgressHook = workInProgressHook.next\n    }\n  }\n  return workInProgressHook\n}\n\nexport function renderWithHooks(\n  Component: any,\n  props: any,\n  refOrContext: any\n): any {\n  let children = Component(props, refOrContext)\n\n  // NOTE: Excessive rerenders won't throw but will instead abort rendering\n  // since a subsequent renderer can throw when this issue occurs instead\n  while (numberOfReRenders < RE_RENDER_LIMIT && didScheduleRenderPhaseUpdate) {\n    // Updates were scheduled during the render phase. They are stored in\n    // the `renderPhaseUpdates` map. Call the component again, reusing the\n    // work-in-progress hooks and applying the additional updates on top. Keep\n    // restarting until no more updates are scheduled.\n    didScheduleRenderPhaseUpdate = false\n    numberOfReRenders += 1\n    // Start over from the beginning of the list\n    workInProgressHook = null\n    children = Component(props, refOrContext)\n  }\n\n  // This will be reset by renderer\n  // firstWorkInProgressHook = null\n\n  numberOfReRenders = 0\n  renderPhaseUpdates = null\n  workInProgressHook = null\n\n  return children\n}\n\nfunction readContext(context: AbstractContext, _: void | number | boolean) {\n  // NOTE: The warning that is used in ReactPartialRendererHooks is obsolete\n  // in a prepass, since it'll be caught by a subsequent renderer anyway\n  // https://github.com/facebook/react/blob/c21c41e/packages/react-dom/src/server/ReactPartialRendererHooks.js#L215-L223\n  return readContextValue(context)\n}\n\nfunction useContext(context: AbstractContext, _: void | number | boolean) {\n  getCurrentIdentity()\n  return readContextValue(context)\n}\n\nfunction basicStateReducer<S>(state: S, action: BasicStateAction<S>): S {\n  // $FlowFixMe\n  return typeof action === 'function' ? action(state) : action\n}\n\nfunction useState<S>(\n  initialState: (() => S) | S\n): [S, Dispatch<BasicStateAction<S>>] {\n  return useReducer(\n    basicStateReducer,\n    // useReducer has a special case to support lazy useState initializers\n    (initialState: any)\n  )\n}\n\nfunction useReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S\n): [S, Dispatch<A>] {\n  const id = getCurrentIdentity()\n  workInProgressHook = createWorkInProgressHook()\n\n  if (isReRender) {\n    // This is a re-render. Apply the new render phase updates to the previous\n    // current hook.\n    const queue: UpdateQueue<A> = (workInProgressHook.queue: any)\n    const dispatch: Dispatch<A> = (queue.dispatch: any)\n    if (renderPhaseUpdates !== null) {\n      // Render phase updates are stored in a map of queue -> linked list\n      const firstRenderPhaseUpdate = renderPhaseUpdates.get(queue)\n      if (firstRenderPhaseUpdate !== undefined) {\n        renderPhaseUpdates.delete(queue)\n        let newState = workInProgressHook.memoizedState\n        let update = firstRenderPhaseUpdate\n        do {\n          // Process this render phase update. We don't have to check the\n          // priority because it will always be the same as the current\n          // render's.\n          const action = update.action\n          newState = reducer(newState, action)\n          update = update.next\n        } while (update !== null)\n\n        workInProgressHook.memoizedState = newState\n\n        return [newState, dispatch]\n      }\n    }\n    return [workInProgressHook.memoizedState, dispatch]\n  } else {\n    let initialState\n    if (reducer === basicStateReducer) {\n      // Special case for `useState`.\n      initialState =\n        typeof initialArg === 'function'\n          ? ((initialArg: any): () => S)()\n          : ((initialArg: any): S)\n    } else {\n      initialState =\n        init !== undefined ? init(initialArg) : ((initialArg: any): S)\n    }\n    workInProgressHook.memoizedState = initialState\n    const queue: UpdateQueue<A> = (workInProgressHook.queue = {\n      last: null,\n      dispatch: null\n    })\n    const dispatch: Dispatch<A> = (queue.dispatch = (dispatchAction.bind(\n      null,\n      id,\n      queue\n    ): any))\n    return [workInProgressHook.memoizedState, dispatch]\n  }\n}\n\nfunction useMemo<T>(nextCreate: () => T, deps: Array<mixed> | void | null): T {\n  getCurrentIdentity()\n  workInProgressHook = createWorkInProgressHook()\n\n  const nextDeps = deps === undefined ? null : deps\n\n  if (workInProgressHook !== null) {\n    const prevState = workInProgressHook.memoizedState\n    if (prevState !== null) {\n      if (nextDeps !== null) {\n        const prevDeps = prevState[1]\n        if (areHookInputsEqual(nextDeps, prevDeps)) {\n          return prevState[0]\n        }\n      }\n    }\n  }\n\n  const nextValue = nextCreate()\n  workInProgressHook.memoizedState = [nextValue, nextDeps]\n  return nextValue\n}\n\nfunction useRef<T>(initialValue: T): { current: T } {\n  getCurrentIdentity()\n  workInProgressHook = createWorkInProgressHook()\n  const previousRef = workInProgressHook.memoizedState\n  if (previousRef === null) {\n    const ref = { current: initialValue }\n    workInProgressHook.memoizedState = ref\n    return ref\n  } else {\n    return previousRef\n  }\n}\n\nfunction dispatchAction<A>(\n  componentIdentity: Identity,\n  queue: UpdateQueue<A>,\n  action: A\n) {\n  if (componentIdentity === getCurrentIdentity()) {\n    // This is a render phase update. Stash it in a lazily-created map of\n    // queue -> linked list of updates. After this render pass, we'll restart\n    // and apply the stashed updates on top of the work-in-progress hook.\n    didScheduleRenderPhaseUpdate = true\n    const update: Update<A> = {\n      action,\n      next: null\n    }\n    if (renderPhaseUpdates === null) {\n      renderPhaseUpdates = new Map()\n    }\n    const firstRenderPhaseUpdate = renderPhaseUpdates.get(queue)\n    if (firstRenderPhaseUpdate === undefined) {\n      renderPhaseUpdates.set(queue, update)\n    } else {\n      // Append the update to the end of the list.\n      let lastRenderPhaseUpdate = firstRenderPhaseUpdate\n      while (lastRenderPhaseUpdate.next !== null) {\n        lastRenderPhaseUpdate = lastRenderPhaseUpdate.next\n      }\n      lastRenderPhaseUpdate.next = update\n    }\n  } else {\n    // This means an update has happened after the function component has\n    // returned. On the server this is a no-op. In React Fiber, the update\n    // would be scheduled for a future render.\n  }\n}\n\nfunction useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n  // Callbacks are passed as they are in the server environment.\n  return callback\n}\n\nfunction noop(): void {}\n\nexport const Dispatcher = {\n  readContext,\n  useContext,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n  useCallback,\n  // ignore useLayout effect completely as usage of it will be caught\n  // in a subsequent render pass\n  useLayoutEffect: noop,\n  // useImperativeHandle is not run in the server environment\n  useImperativeHandle: noop,\n  // Effects are not run in the server environment.\n  useEffect: noop,\n  // Debugging effect\n  useDebugValue: noop\n}\n","// @flow\n\nimport { createElement, type Node } from 'react'\nimport type { LazyComponent, DefaultProps, LazyFrame, Frame } from '../types'\nimport { getChildrenArray } from '../element'\n\nimport {\n  setCurrentIdentity,\n  setCurrentContextStore,\n  getCurrentContextStore,\n  setCurrentContextMap,\n  getCurrentContextMap\n} from '../internals'\n\nconst resolve = (type: LazyComponent): Promise<void> => {\n  type._status = 0 /* PENDING */\n\n  return type\n    ._ctor()\n    .then(Component => {\n      if (typeof Component === 'function') {\n        type._result = Component\n        type._status = 1 /* SUCCESSFUL */\n      } else if (\n        Component !== null &&\n        typeof Component === 'object' &&\n        typeof Component.default === 'function'\n      ) {\n        type._result = Component.default\n        type._status = 1 /* SUCCESSFUL */\n      } else {\n        type._status = 2 /* FAILED */\n      }\n    })\n    .catch(() => {\n      type._status = 2 /* FAILED */\n    })\n}\n\nconst render = (\n  type: LazyComponent,\n  props: DefaultProps,\n  queue: Frame[]\n): Node => {\n  // Component has previously been fetched successfully,\n  // so create the element with passed props and return it\n  if (type._status === 1) {\n    return createElement(type._result, props)\n  }\n\n  return null\n}\n\nexport const mount = (\n  type: LazyComponent,\n  props: DefaultProps,\n  queue: Frame[]\n): Node => {\n  // If the component has not been fetched yet, suspend this component\n  if (type._status !== 2 && type._status !== 1) {\n    queue.push({\n      contextMap: getCurrentContextMap(),\n      contextStore: getCurrentContextStore(),\n      kind: 'frame.lazy',\n      thenable: resolve(type),\n      props,\n      type\n    })\n\n    return null\n  }\n\n  return render(type, props, queue)\n}\n\nexport const update = (queue: Frame[], frame: LazyFrame): Node => {\n  setCurrentIdentity(null)\n  setCurrentContextMap(frame.contextMap)\n  setCurrentContextStore(frame.contextStore)\n  return render(frame.type, frame.props, queue)\n}\n","// @flow\n\nimport type { Node, ComponentType } from 'react'\nimport { computeProps } from '../element'\n\nimport type {\n  Visitor,\n  Hook,\n  Frame,\n  HooksFrame,\n  DefaultProps,\n  ComponentStatics,\n  UserElement\n} from '../types'\n\nimport {\n  type Identity,\n  maskContext,\n  makeIdentity,\n  setCurrentIdentity,\n  getCurrentIdentity,\n  setCurrentContextStore,\n  getCurrentContextStore,\n  setCurrentContextMap,\n  getCurrentContextMap,\n  renderWithHooks,\n  setFirstHook,\n  getFirstHook\n} from '../internals'\n\nconst makeFrame = (\n  type: ComponentType<DefaultProps> & ComponentStatics,\n  props: DefaultProps,\n  thenable: Promise<any>\n) => ({\n  contextMap: getCurrentContextMap(),\n  contextStore: getCurrentContextStore(),\n  id: getCurrentIdentity(),\n  hook: getFirstHook(),\n  kind: 'frame.hooks',\n  thenable,\n  props,\n  type\n})\n\nconst render = (\n  type: ComponentType<DefaultProps> & ComponentStatics,\n  props: DefaultProps,\n  queue: Frame[]\n): Node => {\n  try {\n    return renderWithHooks(\n      type,\n      computeProps(props, type.defaultProps),\n      maskContext(type)\n    )\n  } catch (error) {\n    if (typeof error.then !== 'function') {\n      throw error\n    }\n\n    queue.push(makeFrame(type, props, error))\n    return null\n  }\n}\n\n/** Mount a function component */\nexport const mount = (\n  type: ComponentType<DefaultProps> & ComponentStatics,\n  props: DefaultProps,\n  queue: Frame[],\n  visitor: Visitor,\n  element: UserElement\n): Node => {\n  setFirstHook(null)\n  setCurrentIdentity(makeIdentity())\n\n  const promise = visitor(element)\n  if (promise) {\n    queue.push(makeFrame(type, props, promise))\n    return null\n  }\n\n  return render(type, props, queue)\n}\n\n/** Update a previously suspended function component */\nexport const update = (queue: Frame[], frame: HooksFrame) => {\n  setFirstHook(frame.hook)\n  setCurrentIdentity(frame.id)\n  setCurrentContextMap(frame.contextMap)\n  setCurrentContextStore(frame.contextStore)\n  return render(frame.type, frame.props, queue)\n}\n","// @flow\n\nimport type { Node, ComponentType } from 'react'\nimport { computeProps } from '../element'\n\nimport type {\n  Visitor,\n  Frame,\n  ClassFrame,\n  DefaultProps,\n  ComponentStatics,\n  UserElement\n} from '../types'\n\nimport {\n  maskContext,\n  assignContextMap,\n  setCurrentIdentity,\n  setCurrentContextMap,\n  getCurrentContextMap,\n  setCurrentContextStore,\n  getCurrentContextStore\n} from '../internals'\n\nconst createUpdater = () => {\n  const queue = []\n\n  return {\n    queue,\n    isMounted: () => false,\n    enqueueForceUpdate: () => null,\n    enqueueReplaceState: (instance, completeState) => {\n      if (instance._isMounted) {\n        queue.length = 0\n        queue.push(completeState)\n      }\n    },\n    enqueueSetState: (instance, currentPartialState) => {\n      if (instance._isMounted) {\n        queue.push(currentPartialState)\n      }\n    }\n  }\n}\n\nconst flushEnqueuedState = (instance: any) => {\n  const queue = (instance.updater.queue: any[])\n\n  if (queue.length > 0) {\n    let nextState = Object.assign({}, instance.state)\n\n    for (let i = 0, l = queue.length; i < l; i++) {\n      const partial = queue[i]\n      const partialState =\n        typeof partial === 'function'\n          ? partial.call(instance, nextState, instance.props, instance.context)\n          : partial\n      if (partialState !== null) {\n        Object.assign(nextState, partialState)\n      }\n    }\n\n    instance.state = nextState\n    queue.length = 0\n  }\n}\n\nconst createInstance = (type: any, props: DefaultProps) => {\n  const updater = createUpdater()\n  const computedProps = computeProps(props, type.defaultProps)\n  const context = maskContext(type)\n  const instance = new type(computedProps, context, updater)\n\n  instance.props = computedProps\n  instance.context = context\n  instance.updater = updater\n  instance._isMounted = true\n\n  if (instance.state === undefined) {\n    instance.state = null\n  }\n\n  if (typeof type.getDerivedStateFromProps === 'function') {\n    const { getDerivedStateFromProps } = type\n    const state = getDerivedStateFromProps(instance.props, instance.state)\n    if (state !== null && state !== undefined) {\n      instance.state = Object.assign({}, instance.state, state)\n    }\n  } else if (typeof instance.componentWillMount === 'function') {\n    instance.componentWillMount()\n  } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\n    instance.UNSAFE_componentWillMount()\n  }\n\n  return instance\n}\n\nconst makeFrame = (type: any, instance: any, thenable: Promise<any>) => ({\n  contextMap: getCurrentContextMap(),\n  contextStore: getCurrentContextStore(),\n  thenable,\n  kind: 'frame.class',\n  instance,\n  type\n})\n\nconst render = (type: any, instance: any, queue: Frame[]) => {\n  // Flush all queued up state changes\n  flushEnqueuedState(instance)\n  let child: Node = null\n\n  try {\n    child = instance.render()\n  } catch (error) {\n    if (typeof error.then !== 'function') {\n      throw error\n    }\n\n    queue.push(makeFrame(type, instance, error))\n    return null\n  }\n\n  if (\n    type.childContextTypes !== undefined &&\n    typeof instance.getChildContext === 'function'\n  ) {\n    const childContext = instance.getChildContext()\n    if (childContext !== null && typeof childContext === 'object') {\n      assignContextMap(childContext)\n    }\n  }\n\n  if (\n    typeof instance.getDerivedStateFromProps !== 'function' &&\n    (typeof instance.componentWillMount === 'function' ||\n      typeof instance.UNSAFE_componentWillMount === 'function') &&\n    typeof instance.componentWillUnmount === 'function'\n  ) {\n    try {\n      instance.componentWillUnmount()\n    } catch (_err) {}\n  }\n\n  instance._isMounted = false\n  return child\n}\n\n/** Mount a class component */\nexport const mount = (\n  type: ComponentType<DefaultProps> & ComponentStatics,\n  props: DefaultProps,\n  queue: Frame[],\n  visitor: Visitor,\n  element: UserElement\n) => {\n  setCurrentIdentity(null)\n\n  const instance = createInstance(type, props)\n  const promise = visitor(element, instance)\n  if (promise) {\n    queue.push(makeFrame(type, instance, promise))\n    return null\n  }\n\n  return render(type, instance, queue)\n}\n\n/** Update a previously suspended class component */\nexport const update = (queue: Frame[], frame: ClassFrame) => {\n  setCurrentIdentity(null)\n  setCurrentContextMap(frame.contextMap)\n  setCurrentContextStore(frame.contextStore)\n  return render(frame.type, frame.instance, queue)\n}\n","// @flow\n\nimport { type Node, type ComponentType, createElement } from 'react'\n\nimport {\n  typeOf,\n  shouldConstruct,\n  getChildrenArray,\n  computeProps\n} from './element'\n\nimport {\n  mountFunctionComponent,\n  mountClassComponent,\n  mountLazyComponent\n  // mountStyledComponent,\n  // isStyledElement\n} from './render'\n\nimport type {\n  Visitor,\n  YieldFrame,\n  Frame,\n  ContextMap,\n  ContextEntry,\n  DefaultProps,\n  ComponentStatics,\n  LazyElement,\n  AbstractElement,\n  ConsumerElement,\n  ProviderElement,\n  FragmentElement,\n  SuspenseElement,\n  ForwardRefElement,\n  MemoElement,\n  UserElement,\n  DOMElement\n} from './types'\n\nimport {\n  getCurrentContextMap,\n  getCurrentContextStore,\n  setCurrentContextMap,\n  setCurrentContextStore,\n  flushPrevContextMap,\n  flushPrevContextStore,\n  restoreContextMap,\n  restoreContextStore,\n  readContextValue,\n  setContextValue,\n  setCurrentIdentity\n} from './internals'\n\nimport {\n  REACT_ELEMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_CONTEXT_TYPE,\n  REACT_CONCURRENT_MODE_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE\n} from './symbols'\n\n// Time in ms after which the otherwise synchronous visitor yields so that\n// the event loop is not interrupted for too long\nconst YIELD_AFTER_MS = process.env.NODE_ENV !== 'production' ? 20 : 5\n\nconst render = (\n  type: ComponentType<DefaultProps> & ComponentStatics,\n  props: DefaultProps,\n  queue: Frame[],\n  visitor: Visitor,\n  element: UserElement\n) => {\n  return shouldConstruct(type)\n    ? mountClassComponent(type, props, queue, visitor, element)\n    : mountFunctionComponent(type, props, queue, visitor, element)\n}\n\nexport const visitElement = (\n  element: AbstractElement,\n  queue: Frame[],\n  visitor: Visitor\n): AbstractElement[] => {\n  switch (typeOf(element)) {\n    case REACT_SUSPENSE_TYPE:\n    case REACT_STRICT_MODE_TYPE:\n    case REACT_CONCURRENT_MODE_TYPE:\n    case REACT_PROFILER_TYPE:\n    case REACT_FRAGMENT_TYPE: {\n      // These element types are simply traversed over but otherwise ignored\n      const fragmentElement = ((element: any):\n        | FragmentElement\n        | SuspenseElement)\n      return getChildrenArray(fragmentElement.props.children)\n    }\n\n    case REACT_PROVIDER_TYPE: {\n      const providerElement = ((element: any): ProviderElement)\n      // Add provider's value prop to context\n      const { value, children } = providerElement.props\n      setContextValue(providerElement.type._context, value)\n\n      return getChildrenArray(children)\n    }\n\n    case REACT_CONTEXT_TYPE: {\n      const consumerElement = ((element: any): ConsumerElement)\n      const { children } = consumerElement.props\n\n      // Read from context and call children, if it's been passed\n      if (typeof children === 'function') {\n        const type = (consumerElement.type: any)\n        const context = typeof type._context === 'object' ? type._context : type\n        const value = readContextValue(context)\n        return getChildrenArray(children(value))\n      } else {\n        return []\n      }\n    }\n\n    case REACT_LAZY_TYPE: {\n      const lazyElement = ((element: any): LazyElement)\n      const type = lazyElement.type\n      const child = mountLazyComponent(type, lazyElement.props, queue)\n      return getChildrenArray(child)\n    }\n\n    case REACT_MEMO_TYPE: {\n      const memoElement = ((element: any): MemoElement)\n      const type = memoElement.type.type\n      const child = createElement((type: any), memoElement.props)\n      return getChildrenArray(child)\n    }\n\n    case REACT_FORWARD_REF_TYPE: {\n      const refElement = ((element: any): ForwardRefElement)\n\n      // If we find a StyledComponent, we trigger a specific optimisation\n      // that allows quick rendering of them without computing styles\n      // if (isStyledElement(refElement)) {\n      //   return mountStyledComponent(refElement)\n      // }\n\n      const { render: type, defaultProps } = refElement.type\n      const props = computeProps(refElement.props, defaultProps)\n      const fauxElement = (createElement((render: any), props): any)\n      const child = render(type, props, queue, visitor, fauxElement)\n      return getChildrenArray(child)\n    }\n\n    case REACT_ELEMENT_TYPE: {\n      const el = ((element: any): UserElement | DOMElement)\n      if (typeof el.type === 'string') {\n        // String elements can be skipped, so we just return children\n        return getChildrenArray(el.props.children)\n      } else {\n        const userElement = ((element: any): UserElement)\n        const { type, props } = userElement\n        const child = render(type, props, queue, visitor, userElement)\n        return getChildrenArray(child)\n      }\n    }\n\n    case REACT_PORTAL_TYPE:\n    // Portals are unsupported during SSR since they're DOM-only\n    default:\n      return []\n  }\n}\n\nconst visitLoop = (\n  traversalChildren: AbstractElement[][],\n  traversalMap: Array<void | ContextMap>,\n  traversalStore: Array<void | ContextEntry>,\n  queue: Frame[],\n  visitor: Visitor\n): boolean => {\n  const start = Date.now()\n\n  while (traversalChildren.length > 0) {\n    const element = traversalChildren[traversalChildren.length - 1].shift()\n    if (element !== undefined) {\n      const children = visitElement(element, queue, visitor)\n      traversalChildren.push(children)\n      traversalMap.push(flushPrevContextMap())\n      traversalStore.push(flushPrevContextStore())\n    } else {\n      traversalChildren.pop()\n      restoreContextMap(traversalMap.pop())\n      restoreContextStore(traversalStore.pop())\n    }\n\n    if (Date.now() - start > YIELD_AFTER_MS) {\n      return true\n    }\n  }\n\n  return false\n}\n\nconst makeYieldFrame = (\n  traversalChildren: AbstractElement[][],\n  traversalMap: Array<void | ContextMap>,\n  traversalStore: Array<void | ContextEntry>\n): Frame => ({\n  contextMap: getCurrentContextMap(),\n  contextStore: getCurrentContextStore(),\n  thenable: Promise.resolve(),\n  kind: 'frame.yield',\n  children: traversalChildren,\n  map: traversalMap,\n  store: traversalStore\n})\n\nexport const visitChildren = (\n  init: AbstractElement[],\n  queue: Frame[],\n  visitor: Visitor\n) => {\n  const traversalChildren: AbstractElement[][] = [init]\n  const traversalMap: Array<void | ContextMap> = [flushPrevContextMap()]\n  const traversalStore: Array<void | ContextEntry> = [flushPrevContextStore()]\n\n  const hasYielded = visitLoop(\n    traversalChildren,\n    traversalMap,\n    traversalStore,\n    queue,\n    visitor\n  )\n\n  if (hasYielded) {\n    queue.unshift(\n      makeYieldFrame(traversalChildren, traversalMap, traversalStore)\n    )\n  }\n}\n\nexport const resumeVisitChildren = (\n  frame: YieldFrame,\n  queue: Frame[],\n  visitor: Visitor\n) => {\n  setCurrentIdentity(null)\n  setCurrentContextMap(frame.contextMap)\n  setCurrentContextStore(frame.contextStore)\n\n  const hasYielded = visitLoop(\n    frame.children,\n    frame.map,\n    frame.store,\n    queue,\n    visitor\n  )\n\n  if (hasYielded) {\n    queue.unshift(makeYieldFrame(frame.children, frame.map, frame.store))\n  }\n}\n","// @flow\n\nimport React, { type Node, type Element } from 'react'\nimport type { Visitor, YieldFrame, Frame, AbstractElement } from './types'\nimport { visitChildren, resumeVisitChildren } from './visitor'\nimport { getChildrenArray } from './element'\n\nimport {\n  updateFunctionComponent,\n  updateClassComponent,\n  updateLazyComponent\n} from './render'\n\nimport {\n  setCurrentContextStore,\n  setCurrentContextMap,\n  Dispatcher\n} from './internals'\n\nconst {\n  ReactCurrentDispatcher\n} = (React: any).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED\n\nlet prevDispatcher = ReactCurrentDispatcher.current\n\n/** visitChildren walks all elements (depth-first) and while it walks the\n    element tree some components will suspend and put a `Frame` onto\n    the queue. Hence we recursively look at suspended components in\n    this queue, wait for their promises to resolve, and continue\n    calling visitChildren on their children. */\nconst updateWithFrame = (\n  frame: Frame,\n  queue: Frame[],\n  visitor: Visitor\n): Promise<void> => {\n  if (frame.kind === 'frame.yield') {\n    const yieldFrame: YieldFrame = frame\n\n    return new Promise(resolve => {\n      setImmediate(() => {\n        prevDispatcher = ReactCurrentDispatcher.current\n        ReactCurrentDispatcher.current = Dispatcher\n        resumeVisitChildren(yieldFrame, queue, visitor)\n        ReactCurrentDispatcher.current = prevDispatcher\n        resolve()\n      })\n    })\n  }\n\n  return frame.thenable.then(() => {\n    prevDispatcher = ReactCurrentDispatcher.current\n    ReactCurrentDispatcher.current = Dispatcher\n\n    let children = []\n\n    // Update the component after we've suspended to rerender it,\n    // at which point we'll actually get its children\n    if (frame.kind === 'frame.class') {\n      children = updateClassComponent(queue, frame)\n    } else if (frame.kind === 'frame.hooks') {\n      children = updateFunctionComponent(queue, frame)\n    } else if (frame.kind === 'frame.lazy') {\n      children = updateLazyComponent(queue, frame)\n    }\n\n    // Now continue walking the previously suspended component's\n    // children (which might also suspend)\n    visitChildren(getChildrenArray(children), queue, visitor)\n    ReactCurrentDispatcher.current = prevDispatcher\n  })\n}\n\nconst flushFrames = (queue: Frame[], visitor: Visitor): Promise<void> => {\n  if (queue.length === 0) {\n    return Promise.resolve()\n  }\n\n  return updateWithFrame(queue.shift(), queue, visitor).then(() =>\n    flushFrames(queue, visitor)\n  )\n}\n\nconst defaultVisitor = () => undefined\n\nconst renderPrepass = (element: Node, visitor?: Visitor): Promise<void> => {\n  const queue: Frame[] = []\n  const fn = visitor !== undefined ? visitor : defaultVisitor\n\n  // Context state is kept globally and is modified in-place.\n  // Before we start walking the element tree we need to reset\n  // its current state\n  setCurrentContextMap({})\n  setCurrentContextStore(new Map())\n\n  try {\n    // The \"Dispatcher\" is what handles hook calls and\n    // a React internal that needs to be set to our\n    // dispatcher and reset after we're done\n    prevDispatcher = ReactCurrentDispatcher.current\n    ReactCurrentDispatcher.current = Dispatcher\n\n    visitChildren(getChildrenArray(element), queue, fn)\n  } catch (error) {\n    return Promise.reject(error)\n  } finally {\n    ReactCurrentDispatcher.current = prevDispatcher\n  }\n\n  return flushFrames(queue, fn)\n}\n\nexport default renderPrepass\n"],"names":["const","REACT_ELEMENT_TYPE","is","REACT_PORTAL_TYPE","REACT_FRAGMENT_TYPE","REACT_STRICT_MODE_TYPE","REACT_PROFILER_TYPE","REACT_PROVIDER_TYPE","REACT_CONTEXT_TYPE","REACT_CONCURRENT_MODE_TYPE","REACT_FORWARD_REF_TYPE","REACT_SUSPENSE_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","toArray","Children","isAbstractElement","node","getChildrenArray","filter","computeProps","props","defaultProps","Object","currentContextStore","Map","currentContextMap","prevContextMap","undefined","prevContextEntry","getCurrentContextMap","getCurrentContextStore","flushPrevContextMap","prev","flushPrevContextStore","restoreContextStore","set","setCurrentContextMap","map","setCurrentContextStore","store","readContextValue","context","value","get","_currentValue","emptyContext","maskContext","type","contextType","contextTypes","maskedContext","name","currentIdentity","setCurrentIdentity","id","getCurrentIdentity","Error","firstWorkInProgressHook","workInProgressHook","isReRender","didScheduleRenderPhaseUpdate","renderPhaseUpdates","numberOfReRenders","setFirstHook","hook","createWorkInProgressHook","memoizedState","queue","next","basicStateReducer","state","action","useReducer","reducer","initialArg","init","initialState","dispatch","firstRenderPhaseUpdate","delete","newState","update","last","dispatchAction","bind","componentIdentity","lastRenderPhaseUpdate","noop","Dispatcher","_","nextCreate","deps","nextDeps","prevState","prevDeps","let","i","length","areHookInputsEqual","nextValue","initialValue","previousRef","ref","current","callback","useLayoutEffect","useImperativeHandle","useEffect","useDebugValue","resolve","_status","_ctor","then","Component","_result","default","catch","render","createElement","makeFrame","thenable","contextMap","contextStore","kind","refOrContext","children","renderWithHooks","error","push","instance","updater","nextState","l","partial","partialState","call","flushEnqueuedState","child","childContextTypes","getChildContext","childContext","assignContextMap","getDerivedStateFromProps","componentWillMount","UNSAFE_componentWillMount","componentWillUnmount","_err","_isMounted","visitor","element","Comp","prototype","isReactComponent","isMounted","enqueueForceUpdate","enqueueReplaceState","completeState","enqueueSetState","currentPartialState","computedProps","createInstance","promise","mountClassComponent","mountFunctionComponent","visitElement","x","$$typeof","typeOf","setContextValue","_context","mountLazyComponent","fauxElement","visitLoop","traversalChildren","traversalMap","traversalStore","start","Date","now","shift","pop","makeYieldFrame","Promise","visitChildren","unshift","React","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","prevDispatcher","ReactCurrentDispatcher","flushFrames","frame","yieldFrame","setImmediate","resumeVisitChildren","updateClassComponent","updateFunctionComponent","updateLazyComponent","updateWithFrame","defaultVisitor","fn","reject"],"mappings":"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"}