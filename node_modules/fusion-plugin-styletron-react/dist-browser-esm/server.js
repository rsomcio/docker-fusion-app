/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env node */
import path from 'path';
import React from 'react';
import { Server as Styletron } from 'styletron-engine-atomic';
import { injectDeclarationCompatMixin } from './inject-declaration-compat-mixin.js';
let workerPath;
let wasmPath;

if (process.env.NODE_ENV !== "production" && false) {
  const base = path.dirname(require.resolve('css-to-js-sourcemap-worker'));
  workerPath = path.resolve(base, 'worker.js');
  wasmPath = path.resolve(base, 'mappings.wasm');
}

const StyletronCompat = injectDeclarationCompatMixin(Styletron);
const plugin = false && createPlugin({
  deps: {
    prefix: AtomicPrefixToken.optional
  },
  middleware: ({
    prefix
  }) => (ctx, next) => {
    if (process.env.NODE_ENV !== "production") {
      if (ctx.url === workerRoute) {
        ctx.body = fs.createReadStream(workerPath);
        return next();
      }

      if (ctx.url === wasmRoute) {
        ctx.body = fs.createReadStream(wasmPath);
        return next();
      }
    }

    if (ctx.element) {
      const config = prefix === void 0 ? void 0 : {
        prefix
      };
      const engine = new StyletronCompat(config);
      ctx.element = React.createElement(StyletronProvider, {
        value: engine
      }, ctx.element);
      return next().then(() => {
        const stylesForHead = engine.getStylesheetsHtml();
        ctx.template.head.push(dangerouslySetHTML(stylesForHead));
      });
    } else {
      return next();
    }
  }
});
export default plugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJuYW1lcyI6WyJwYXRoIiwiUmVhY3QiLCJTZXJ2ZXIiLCJTdHlsZXRyb24iLCJpbmplY3REZWNsYXJhdGlvbkNvbXBhdE1peGluIiwid29ya2VyUGF0aCIsIndhc21QYXRoIiwiYmFzZSIsImRpcm5hbWUiLCJyZXF1aXJlIiwicmVzb2x2ZSIsIlN0eWxldHJvbkNvbXBhdCIsInBsdWdpbiIsImNyZWF0ZVBsdWdpbiIsImRlcHMiLCJwcmVmaXgiLCJBdG9taWNQcmVmaXhUb2tlbiIsIm9wdGlvbmFsIiwibWlkZGxld2FyZSIsImN0eCIsIm5leHQiLCJ1cmwiLCJ3b3JrZXJSb3V0ZSIsImJvZHkiLCJmcyIsImNyZWF0ZVJlYWRTdHJlYW0iLCJ3YXNtUm91dGUiLCJlbGVtZW50IiwiY29uZmlnIiwiZW5naW5lIiwidGhlbiIsInN0eWxlc0ZvckhlYWQiLCJnZXRTdHlsZXNoZWV0c0h0bWwiLCJ0ZW1wbGF0ZSIsImhlYWQiLCJwdXNoIiwiZGFuZ2Vyb3VzbHlTZXRIVE1MIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFRQTtBQUVBLE9BQU9BLElBQVAsTUFBaUIsTUFBakI7QUFHQSxPQUFPQyxLQUFQLE1BQWtCLE9BQWxCO0FBS0EsU0FBUUMsTUFBTSxJQUFJQyxTQUFsQixRQUFrQyx5QkFBbEM7QUFFQSxTQUFRQyw0QkFBUixRQUEyQyxzQ0FBM0M7QUFHQSxJQUFJQyxVQUFKO0FBQ0EsSUFBSUMsUUFBSjs7QUFFQSxJQUFJLDhDQUFKLEVBQXlCO0FBQ3ZCLFFBQU1DLElBQUksR0FBR1AsSUFBSSxDQUFDUSxPQUFMLENBQWFDLE9BQU8sQ0FBQ0MsT0FBUixDQUFnQiw0QkFBaEIsQ0FBYixDQUFiO0FBQ0FMLEVBQUFBLFVBQVUsR0FBR0wsSUFBSSxDQUFDVSxPQUFMLENBQWFILElBQWIsRUFBbUIsV0FBbkIsQ0FBYjtBQUNBRCxFQUFBQSxRQUFRLEdBQUdOLElBQUksQ0FBQ1UsT0FBTCxDQUFhSCxJQUFiLEVBQW1CLGVBQW5CLENBQVg7QUFDRDs7QUFFRCxNQUFNSSxlQUFlLEdBQUdQLDRCQUE0QixDQUFDRCxTQUFELENBQXBEO0FBRUEsTUFBTVMsTUFBTSxHQUNWLFNBQ0FDLFlBQVksQ0FBQztBQUNYQyxFQUFBQSxJQUFJLEVBQUU7QUFDSkMsSUFBQUEsTUFBTSxFQUFFQyxpQkFBaUIsQ0FBQ0M7QUFEdEIsR0FESztBQUlYQyxFQUFBQSxVQUFVLEVBQUUsQ0FBQztBQUFDSCxJQUFBQTtBQUFELEdBQUQsS0FBYyxDQUFDSSxHQUFELEVBQU1DLElBQU4sS0FBZTtBQUN2QywrQ0FBYTtBQUNYLFVBQUlELEdBQUcsQ0FBQ0UsR0FBSixLQUFZQyxXQUFoQixFQUE2QjtBQUMzQkgsUUFBQUEsR0FBRyxDQUFDSSxJQUFKLEdBQVdDLEVBQUUsQ0FBQ0MsZ0JBQUgsQ0FBb0JwQixVQUFwQixDQUFYO0FBQ0EsZUFBT2UsSUFBSSxFQUFYO0FBQ0Q7O0FBQ0QsVUFBSUQsR0FBRyxDQUFDRSxHQUFKLEtBQVlLLFNBQWhCLEVBQTJCO0FBQ3pCUCxRQUFBQSxHQUFHLENBQUNJLElBQUosR0FBV0MsRUFBRSxDQUFDQyxnQkFBSCxDQUFvQm5CLFFBQXBCLENBQVg7QUFDQSxlQUFPYyxJQUFJLEVBQVg7QUFDRDtBQUNGOztBQUVELFFBQUlELEdBQUcsQ0FBQ1EsT0FBUixFQUFpQjtBQUNmLFlBQU1DLE1BQU0sR0FBR2IsTUFBTSxLQUFLLEtBQUssQ0FBaEIsR0FBb0IsS0FBSyxDQUF6QixHQUE2QjtBQUFDQSxRQUFBQTtBQUFELE9BQTVDO0FBQ0EsWUFBTWMsTUFBTSxHQUFHLElBQUlsQixlQUFKLENBQW9CaUIsTUFBcEIsQ0FBZjtBQUVBVCxNQUFBQSxHQUFHLENBQUNRLE9BQUosR0FDRSxvQkFBQyxpQkFBRDtBQUFtQixRQUFBLEtBQUssRUFBRUU7QUFBMUIsU0FBbUNWLEdBQUcsQ0FBQ1EsT0FBdkMsQ0FERjtBQUlBLGFBQU9QLElBQUksR0FBR1UsSUFBUCxDQUFZLE1BQU07QUFDdkIsY0FBTUMsYUFBYSxHQUFHRixNQUFNLENBQUNHLGtCQUFQLEVBQXRCO0FBQ0FiLFFBQUFBLEdBQUcsQ0FBQ2MsUUFBSixDQUFhQyxJQUFiLENBQWtCQyxJQUFsQixDQUF1QkMsa0JBQWtCLENBQUNMLGFBQUQsQ0FBekM7QUFDRCxPQUhNLENBQVA7QUFJRCxLQVpELE1BWU87QUFDTCxhQUFPWCxJQUFJLEVBQVg7QUFDRDtBQUNGO0FBL0JVLENBQUQsQ0FGZDtBQW9DQSxlQUFpQlIsTUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQ29weXJpZ2h0IChjKSAyMDE4IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG4vKiBlc2xpbnQtZW52IG5vZGUgKi9cblxuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtjcmVhdGVQbHVnaW4sIGRhbmdlcm91c2x5U2V0SFRNTH0gZnJvbSAnZnVzaW9uLWNvcmUnO1xuaW1wb3J0IHR5cGUge0Z1c2lvblBsdWdpbn0gZnJvbSAnZnVzaW9uLWNvcmUnO1xuXG5pbXBvcnQge1Byb3ZpZGVyIGFzIFN0eWxldHJvblByb3ZpZGVyfSBmcm9tICdzdHlsZXRyb24tcmVhY3QnO1xuaW1wb3J0IHtTZXJ2ZXIgYXMgU3R5bGV0cm9ufSBmcm9tICdzdHlsZXRyb24tZW5naW5lLWF0b21pYyc7XG5cbmltcG9ydCB7aW5qZWN0RGVjbGFyYXRpb25Db21wYXRNaXhpbn0gZnJvbSAnLi9pbmplY3QtZGVjbGFyYXRpb24tY29tcGF0LW1peGluLmpzJztcbmltcG9ydCB7d29ya2VyUm91dGUsIHdhc21Sb3V0ZSwgQXRvbWljUHJlZml4VG9rZW59IGZyb20gJy4vY29uc3RhbnRzLmpzJztcblxubGV0IHdvcmtlclBhdGg7XG5sZXQgd2FzbVBhdGg7XG5cbmlmIChfX0RFVl9fICYmIF9fTk9ERV9fKSB7XG4gIGNvbnN0IGJhc2UgPSBwYXRoLmRpcm5hbWUocmVxdWlyZS5yZXNvbHZlKCdjc3MtdG8tanMtc291cmNlbWFwLXdvcmtlcicpKTtcbiAgd29ya2VyUGF0aCA9IHBhdGgucmVzb2x2ZShiYXNlLCAnd29ya2VyLmpzJyk7XG4gIHdhc21QYXRoID0gcGF0aC5yZXNvbHZlKGJhc2UsICdtYXBwaW5ncy53YXNtJyk7XG59XG5cbmNvbnN0IFN0eWxldHJvbkNvbXBhdCA9IGluamVjdERlY2xhcmF0aW9uQ29tcGF0TWl4aW4oU3R5bGV0cm9uKTtcblxuY29uc3QgcGx1Z2luID1cbiAgX19OT0RFX18gJiZcbiAgY3JlYXRlUGx1Z2luKHtcbiAgICBkZXBzOiB7XG4gICAgICBwcmVmaXg6IEF0b21pY1ByZWZpeFRva2VuLm9wdGlvbmFsLFxuICAgIH0sXG4gICAgbWlkZGxld2FyZTogKHtwcmVmaXh9KSA9PiAoY3R4LCBuZXh0KSA9PiB7XG4gICAgICBpZiAoX19ERVZfXykge1xuICAgICAgICBpZiAoY3R4LnVybCA9PT0gd29ya2VyUm91dGUpIHtcbiAgICAgICAgICBjdHguYm9keSA9IGZzLmNyZWF0ZVJlYWRTdHJlYW0od29ya2VyUGF0aCk7XG4gICAgICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3R4LnVybCA9PT0gd2FzbVJvdXRlKSB7XG4gICAgICAgICAgY3R4LmJvZHkgPSBmcy5jcmVhdGVSZWFkU3RyZWFtKHdhc21QYXRoKTtcbiAgICAgICAgICByZXR1cm4gbmV4dCgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChjdHguZWxlbWVudCkge1xuICAgICAgICBjb25zdCBjb25maWcgPSBwcmVmaXggPT09IHZvaWQgMCA/IHZvaWQgMCA6IHtwcmVmaXh9O1xuICAgICAgICBjb25zdCBlbmdpbmUgPSBuZXcgU3R5bGV0cm9uQ29tcGF0KGNvbmZpZyk7XG5cbiAgICAgICAgY3R4LmVsZW1lbnQgPSAoXG4gICAgICAgICAgPFN0eWxldHJvblByb3ZpZGVyIHZhbHVlPXtlbmdpbmV9PntjdHguZWxlbWVudH08L1N0eWxldHJvblByb3ZpZGVyPlxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiBuZXh0KCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgY29uc3Qgc3R5bGVzRm9ySGVhZCA9IGVuZ2luZS5nZXRTdHlsZXNoZWV0c0h0bWwoKTtcbiAgICAgICAgICBjdHgudGVtcGxhdGUuaGVhZC5wdXNoKGRhbmdlcm91c2x5U2V0SFRNTChzdHlsZXNGb3JIZWFkKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcblxuZXhwb3J0IGRlZmF1bHQgKChwbHVnaW46IGFueSk6IEZ1c2lvblBsdWdpbjwqLCAqPik7XG4iXX0=